
HotelGuestService.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000024ca  0000255e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800214  00800214  00002572  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00005970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00006320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d3  00000000  00000000  000063c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000375  00000000  00000000  00008893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c86  00000000  00000000  00008c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00009890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006da  00000000  00000000  00009eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f94  00000000  00000000  0000a58e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_5>
      18:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <line_follow+0x102>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea ec       	ldi	r30, 0xCA	; 202
     17e:	f4 e2       	ldi	r31, 0x24	; 36
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 31       	cpi	r26, 0x14	; 20
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a4 e1       	ldi	r26, 0x14	; 20
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a2 33       	cpi	r26, 0x32	; 50
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <main>
     1a4:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <buzzer_pin_config>:
*/


void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     1ac:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     1ae:	43 98       	cbi	0x08, 3	; 8
}
     1b0:	08 95       	ret

000001b2 <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     1b2:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     1b4:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     1b6:	88 b9       	out	0x08, r24	; 8
}
     1b8:	08 95       	ret

000001ba <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     1ba:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     1bc:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     1be:	88 b9       	out	0x08, r24	; 8
}
     1c0:	08 95       	ret

000001c2 <buzzer>:
void buzzer(){
	buzzer_on();
     1c2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	8f ef       	ldi	r24, 0xFF	; 255
     1c8:	9f e3       	ldi	r25, 0x3F	; 63
     1ca:	ab e0       	ldi	r26, 0x0B	; 11
     1cc:	81 50       	subi	r24, 0x01	; 1
     1ce:	90 40       	sbci	r25, 0x00	; 0
     1d0:	a0 40       	sbci	r26, 0x00	; 0
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <buzzer+0xa>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <buzzer+0x14>
     1d6:	00 00       	nop
	_delay_ms(250);
	buzzer_off();
     1d8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	9f e3       	ldi	r25, 0x3F	; 63
     1e0:	ab e0       	ldi	r26, 0x0B	; 11
     1e2:	81 50       	subi	r24, 0x01	; 1
     1e4:	90 40       	sbci	r25, 0x00	; 0
     1e6:	a0 40       	sbci	r26, 0x00	; 0
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <buzzer+0x20>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <buzzer+0x2a>
     1ec:	00 00       	nop
	_delay_ms(250);
}
     1ee:	08 95       	ret

000001f0 <end_buzzer>:

void end_buzzer(){
	buzzer_on();
     1f0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	9f ef       	ldi	r25, 0xFF	; 255
     1f8:	a0 ee       	ldi	r26, 0xE0	; 224
     1fa:	81 50       	subi	r24, 0x01	; 1
     1fc:	90 40       	sbci	r25, 0x00	; 0
     1fe:	a0 40       	sbci	r26, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <end_buzzer+0xa>
     202:	00 c0       	rjmp	.+0      	; 0x204 <end_buzzer+0x14>
     204:	00 00       	nop
	_delay_ms(5000);
	buzzer_off();
     206:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	9f e3       	ldi	r25, 0x3F	; 63
     20e:	ab e0       	ldi	r26, 0x0B	; 11
     210:	81 50       	subi	r24, 0x01	; 1
     212:	90 40       	sbci	r25, 0x00	; 0
     214:	a0 40       	sbci	r26, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <end_buzzer+0x20>
     218:	00 c0       	rjmp	.+0      	; 0x21a <end_buzzer+0x2a>
     21a:	00 00       	nop
	_delay_ms(250);
     21c:	08 95       	ret

0000021e <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     21e:	87 b1       	in	r24, 0x07	; 7
     220:	87 6f       	ori	r24, 0xF7	; 247
     222:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     224:	88 b1       	in	r24, 0x08	; 8
     226:	80 78       	andi	r24, 0x80	; 128
     228:	88 b9       	out	0x08, r24	; 8
}
     22a:	08 95       	ret

0000022c <lcd_set_4bit>:
     22c:	86 e6       	ldi	r24, 0x66	; 102
     22e:	9e e0       	ldi	r25, 0x0E	; 14
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <lcd_set_4bit+0x4>
     234:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     236:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     238:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     23a:	80 e3       	ldi	r24, 0x30	; 48
     23c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     23e:	42 9a       	sbi	0x08, 2	; 8
     240:	ef ef       	ldi	r30, 0xFF	; 255
     242:	f7 e4       	ldi	r31, 0x47	; 71
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_set_4bit+0x18>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_set_4bit+0x1e>
     24a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     24c:	42 98       	cbi	0x08, 2	; 8
     24e:	e6 e6       	ldi	r30, 0x66	; 102
     250:	fe e0       	ldi	r31, 0x0E	; 14
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <lcd_set_4bit+0x26>
     256:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     258:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     25a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     25c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     25e:	42 9a       	sbi	0x08, 2	; 8
     260:	ef ef       	ldi	r30, 0xFF	; 255
     262:	f7 e4       	ldi	r31, 0x47	; 71
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <lcd_set_4bit+0x38>
     268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_set_4bit+0x3e>
     26a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     26c:	42 98       	cbi	0x08, 2	; 8
     26e:	e6 e6       	ldi	r30, 0x66	; 102
     270:	fe e0       	ldi	r31, 0x0E	; 14
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <lcd_set_4bit+0x46>
     276:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     278:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     27a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     27c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     27e:	42 9a       	sbi	0x08, 2	; 8
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	97 e4       	ldi	r25, 0x47	; 71
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_set_4bit+0x58>
     288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_set_4bit+0x5e>
     28a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     28c:	42 98       	cbi	0x08, 2	; 8
     28e:	e6 e6       	ldi	r30, 0x66	; 102
     290:	fe e0       	ldi	r31, 0x0E	; 14
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <lcd_set_4bit+0x66>
     296:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     298:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     29a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     29c:	80 e2       	ldi	r24, 0x20	; 32
     29e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2a0:	42 9a       	sbi	0x08, 2	; 8
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	97 e4       	ldi	r25, 0x47	; 71
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_set_4bit+0x7a>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_set_4bit+0x80>
     2ac:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2ae:	42 98       	cbi	0x08, 2	; 8

	
}
     2b0:	08 95       	ret

000002b2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     2b2:	98 b1       	in	r25, 0x08	; 8
     2b4:	9f 70       	andi	r25, 0x0F	; 15
     2b6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b8:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     2ba:	28 2f       	mov	r18, r24
     2bc:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2be:	92 2b       	or	r25, r18
     2c0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     2c2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2c4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2c6:	42 9a       	sbi	0x08, 2	; 8
     2c8:	ef ef       	ldi	r30, 0xFF	; 255
     2ca:	f7 e4       	ldi	r31, 0x47	; 71
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_wr_command+0x1a>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <lcd_wr_command+0x20>
     2d2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2d4:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     2d6:	98 b1       	in	r25, 0x08	; 8
     2d8:	9f 70       	andi	r25, 0x0F	; 15
     2da:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     2dc:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     2de:	82 95       	swap	r24
     2e0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     2e2:	89 2b       	or	r24, r25
     2e4:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     2e6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2ea:	42 9a       	sbi	0x08, 2	; 8
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	97 e4       	ldi	r25, 0x47	; 71
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_wr_command+0x3e>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_wr_command+0x44>
     2f6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f8:	42 98       	cbi	0x08, 2	; 8
}
     2fa:	08 95       	ret

000002fc <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     2fc:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_set_4bit>
     300:	86 e6       	ldi	r24, 0x66	; 102
     302:	9e e0       	ldi	r25, 0x0E	; 14
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <lcd_init+0x8>
     308:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
	lcd_wr_command(0x01);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
	lcd_wr_command(0x06);
     316:	86 e0       	ldi	r24, 0x06	; 6
     318:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     31c:	8e e0       	ldi	r24, 0x0E	; 14
     31e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
	lcd_wr_command(0x80);
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
		
}
     328:	08 95       	ret

0000032a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     32a:	98 b1       	in	r25, 0x08	; 8
     32c:	9f 70       	andi	r25, 0x0F	; 15
     32e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     330:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     332:	28 2f       	mov	r18, r24
     334:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     336:	92 2b       	or	r25, r18
     338:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     33a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     33c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     33e:	42 9a       	sbi	0x08, 2	; 8
     340:	ef ef       	ldi	r30, 0xFF	; 255
     342:	f7 e4       	ldi	r31, 0x47	; 71
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <lcd_wr_char+0x1a>
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_wr_char+0x20>
     34a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     34c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     34e:	98 b1       	in	r25, 0x08	; 8
     350:	9f 70       	andi	r25, 0x0F	; 15
     352:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     354:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     356:	82 95       	swap	r24
     358:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     35a:	89 2b       	or	r24, r25
     35c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     35e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     360:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     362:	42 9a       	sbi	0x08, 2	; 8
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	97 e4       	ldi	r25, 0x47	; 71
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_wr_char+0x3e>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_wr_char+0x44>
     36e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     370:	42 98       	cbi	0x08, 2	; 8
}
     372:	08 95       	ret

00000374 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     374:	80 e8       	ldi	r24, 0x80	; 128
     376:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
}
     37a:	08 95       	ret

0000037c <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	ec 01       	movw	r28, r24
	while(*str != '\0')
     382:	88 81       	ld	r24, Y
     384:	88 23       	and	r24, r24
     386:	31 f0       	breq	.+12     	; 0x394 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     388:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     38a:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     38e:	89 91       	ld	r24, Y+
     390:	88 23       	and	r24, r24
     392:	d9 f7       	brne	.-10     	; 0x38a <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     39a:	82 30       	cpi	r24, 0x02	; 2
     39c:	79 f0       	breq	.+30     	; 0x3bc <lcd_cursor+0x22>
     39e:	83 30       	cpi	r24, 0x03	; 3
     3a0:	18 f4       	brcc	.+6      	; 0x3a8 <lcd_cursor+0xe>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	c9 f4       	brne	.+50     	; 0x3d8 <lcd_cursor+0x3e>
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <lcd_cursor+0x18>
     3a8:	83 30       	cpi	r24, 0x03	; 3
     3aa:	69 f0       	breq	.+26     	; 0x3c6 <lcd_cursor+0x2c>
     3ac:	84 30       	cpi	r24, 0x04	; 4
     3ae:	a1 f4       	brne	.+40     	; 0x3d8 <lcd_cursor+0x3e>
     3b0:	0f c0       	rjmp	.+30     	; 0x3d0 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     3b2:	86 2f       	mov	r24, r22
     3b4:	81 58       	subi	r24, 0x81	; 129
     3b6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
     3ba:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     3bc:	86 2f       	mov	r24, r22
     3be:	81 54       	subi	r24, 0x41	; 65
     3c0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
     3c4:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     3c6:	86 2f       	mov	r24, r22
     3c8:	8d 56       	subi	r24, 0x6D	; 109
     3ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
     3ce:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     3d0:	86 2f       	mov	r24, r22
     3d2:	8d 52       	subi	r24, 0x2D	; 45
     3d4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
     3d8:	08 95       	ret

000003da <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	8a 01       	movw	r16, r20
     3e4:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     3e6:	88 23       	and	r24, r24
     3e8:	11 f0       	breq	.+4      	; 0x3ee <lcd_print+0x14>
     3ea:	66 23       	and	r22, r22
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <lcd_print+0x1a>
	{
		lcd_home();
     3ee:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_home>
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     3f4:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
	}
	if(digits==5 || flag==1)
     3f8:	c5 30       	cpi	r28, 0x05	; 5
     3fa:	d1 05       	cpc	r29, r1
     3fc:	71 f4       	brne	.+28     	; 0x41a <lcd_print+0x40>
	{
		million=value/10000+48;
     3fe:	c8 01       	movw	r24, r16
     400:	60 e1       	ldi	r22, 0x10	; 16
     402:	77 e2       	ldi	r23, 0x27	; 39
     404:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     408:	cb 01       	movw	r24, r22
     40a:	c0 96       	adiw	r24, 0x30	; 48
     40c:	90 93 26 02 	sts	0x0226, r25
     410:	80 93 25 02 	sts	0x0225, r24
		lcd_wr_char(million);
     414:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>
     418:	03 c0       	rjmp	.+6      	; 0x420 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     41a:	c4 30       	cpi	r28, 0x04	; 4
     41c:	d1 05       	cpc	r29, r1
     41e:	b9 f4       	brne	.+46     	; 0x44e <lcd_print+0x74>
	{
		temp = value/1000;
     420:	c8 01       	movw	r24, r16
     422:	68 ee       	ldi	r22, 0xE8	; 232
     424:	73 e0       	ldi	r23, 0x03	; 3
     426:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     42a:	cb 01       	movw	r24, r22
     42c:	70 93 28 02 	sts	0x0228, r23
     430:	60 93 27 02 	sts	0x0227, r22
		thousand = temp%10 + 48;
     434:	6a e0       	ldi	r22, 0x0A	; 10
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     43c:	c0 96       	adiw	r24, 0x30	; 48
     43e:	90 93 31 02 	sts	0x0231, r25
     442:	80 93 30 02 	sts	0x0230, r24
		lcd_wr_char(thousand);
     446:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>
		flag=1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     44e:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     450:	c3 30       	cpi	r28, 0x03	; 3
     452:	d1 05       	cpc	r29, r1
     454:	11 f0       	breq	.+4      	; 0x45a <lcd_print+0x80>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	b1 f4       	brne	.+44     	; 0x486 <lcd_print+0xac>
	{
		temp = value/100;
     45a:	c8 01       	movw	r24, r16
     45c:	64 e6       	ldi	r22, 0x64	; 100
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     464:	cb 01       	movw	r24, r22
     466:	70 93 28 02 	sts	0x0228, r23
     46a:	60 93 27 02 	sts	0x0227, r22
		hundred = temp%10 + 48;
     46e:	6a e0       	ldi	r22, 0x0A	; 10
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 2d 02 	sts	0x022D, r25
     47c:	80 93 2c 02 	sts	0x022C, r24
		lcd_wr_char(hundred);
     480:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>
		flag=1;
     484:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     486:	c2 30       	cpi	r28, 0x02	; 2
     488:	d1 05       	cpc	r29, r1
     48a:	11 f0       	breq	.+4      	; 0x490 <lcd_print+0xb6>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	b1 f4       	brne	.+44     	; 0x4bc <lcd_print+0xe2>
	{
		temp = value/10;
     490:	2a e0       	ldi	r18, 0x0A	; 10
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	c8 01       	movw	r24, r16
     496:	b9 01       	movw	r22, r18
     498:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     49c:	cb 01       	movw	r24, r22
     49e:	70 93 28 02 	sts	0x0228, r23
     4a2:	60 93 27 02 	sts	0x0227, r22
		tens = temp%10 + 48;
     4a6:	b9 01       	movw	r22, r18
     4a8:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     4ac:	c0 96       	adiw	r24, 0x30	; 48
     4ae:	90 93 2b 02 	sts	0x022B, r25
     4b2:	80 93 2a 02 	sts	0x022A, r24
		lcd_wr_char(tens);
     4b6:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>
		flag=1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     4bc:	c1 30       	cpi	r28, 0x01	; 1
     4be:	d1 05       	cpc	r29, r1
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <lcd_print+0xec>
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	61 f4       	brne	.+24     	; 0x4de <lcd_print+0x104>
	{
		unit = value%10 + 48;
     4c6:	c8 01       	movw	r24, r16
     4c8:	6a e0       	ldi	r22, 0x0A	; 10
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	0e 94 4f 12 	call	0x249e	; 0x249e <__udivmodhi4>
     4d0:	c0 96       	adiw	r24, 0x30	; 48
     4d2:	90 93 2f 02 	sts	0x022F, r25
     4d6:	80 93 2e 02 	sts	0x022E, r24
		lcd_wr_char(unit);
     4da:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>
	}
	if(digits>5)
     4de:	c6 30       	cpi	r28, 0x06	; 6
     4e0:	d1 05       	cpc	r29, r1
     4e2:	1c f0       	brlt	.+6      	; 0x4ea <lcd_print+0x110>
	{
		lcd_wr_char('E');
     4e4:	85 e4       	ldi	r24, 0x45	; 69
     4e6:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_wr_char>
	}
	
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	08 95       	ret

000004f4 <adc_pin_config>:
unsigned int s5 = 0;

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
     4f4:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     4f6:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     4f8:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     4fc:	10 92 08 01 	sts	0x0108, r1
}
     500:	08 95       	ret

00000502 <adc_init>:


void adc_init()
{
	ADCSRA = 0x00;
     502:	ea e7       	ldi	r30, 0x7A	; 122
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     508:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     50c:	80 e2       	ldi	r24, 0x20	; 32
     50e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     516:	86 e8       	ldi	r24, 0x86	; 134
     518:	80 83       	st	Z, r24
}
     51a:	08 95       	ret

0000051c <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     51c:	88 30       	cpi	r24, 0x08	; 8
     51e:	18 f0       	brcs	.+6      	; 0x526 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     520:	98 e0       	ldi	r25, 0x08	; 8
     522:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     526:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     528:	80 62       	ori	r24, 0x20	; 32
     52a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     52e:	ea e7       	ldi	r30, 0x7A	; 122
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	80 64       	ori	r24, 0x40	; 64
     536:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     538:	80 81       	ld	r24, Z
     53a:	84 ff       	sbrs	r24, 4
     53c:	fd cf       	rjmp	.-6      	; 0x538 <ADC_Conversion+0x1c>
	a=ADCH;
     53e:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     542:	ea e7       	ldi	r30, 0x7A	; 122
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	90 81       	ld	r25, Z
     548:	90 61       	ori	r25, 0x10	; 16
     54a:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     54c:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     550:	08 95       	ret

00000552 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	d8 2f       	mov	r29, r24
     558:	c6 2f       	mov	r28, r22
     55a:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     55c:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
     560:	48 2f       	mov	r20, r24
     562:	80 93 29 02 	sts	0x0229, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     566:	8d 2f       	mov	r24, r29
     568:	6c 2f       	mov	r22, r28
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	23 e0       	ldi	r18, 0x03	; 3
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <Sharp_GP2D12_estimation>:
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     57e:	68 2f       	mov	r22, r24
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__floatunsisf>
     58a:	2f ee       	ldi	r18, 0xEF	; 239
     58c:	39 ec       	ldi	r19, 0xC9	; 201
     58e:	43 e9       	ldi	r20, 0x93	; 147
     590:	5f e3       	ldi	r21, 0x3F	; 63
     592:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <pow>
     596:	b6 2f       	mov	r27, r22
     598:	a7 2f       	mov	r26, r23
     59a:	38 2f       	mov	r19, r24
     59c:	29 2f       	mov	r18, r25
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 e8       	ldi	r24, 0x80	; 128
     5a4:	9f e3       	ldi	r25, 0x3F	; 63
     5a6:	42 2f       	mov	r20, r18
     5a8:	0b 2f       	mov	r16, r27
     5aa:	1a 2f       	mov	r17, r26
     5ac:	23 2f       	mov	r18, r19
     5ae:	34 2f       	mov	r19, r20
     5b0:	a9 01       	movw	r20, r18
     5b2:	98 01       	movw	r18, r16
     5b4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divsf3>
     5b8:	2a e9       	ldi	r18, 0x9A	; 154
     5ba:	39 ef       	ldi	r19, 0xF9	; 249
     5bc:	4e e2       	ldi	r20, 0x2E	; 46
     5be:	55 e4       	ldi	r21, 0x45	; 69
     5c0:	0e 94 87 10 	call	0x210e	; 0x210e <__mulsf3>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e2       	ldi	r20, 0x20	; 32
     5ca:	51 e4       	ldi	r21, 0x41	; 65
     5cc:	0e 94 87 10 	call	0x210e	; 0x210e <__mulsf3>
     5d0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__fixsfsi>
     5d4:	88 27       	eor	r24, r24
     5d6:	77 fd       	sbrc	r23, 7
     5d8:	80 95       	com	r24
     5da:	98 2f       	mov	r25, r24
     5dc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__floatsisf>
	distanceInt = (int)distance;
     5e0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     5e4:	86 2f       	mov	r24, r22
     5e6:	97 2f       	mov	r25, r23
     5e8:	23 e0       	ldi	r18, 0x03	; 3
     5ea:	81 32       	cpi	r24, 0x21	; 33
     5ec:	92 07       	cpc	r25, r18
     5ee:	10 f0       	brcs	.+4      	; 0x5f4 <Sharp_GP2D12_estimation+0x7a>
     5f0:	80 e2       	ldi	r24, 0x20	; 32
     5f2:	93 e0       	ldi	r25, 0x03	; 3
}
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <get_sharp_sensor_values>:
{
	unsigned char sharp1=0;
	unsigned char sharp3=0;
	unsigned char sharp5=0;

	sharp1 = ADC_Conversion(9);
     5fa:	89 e0       	ldi	r24, 0x09	; 9
     5fc:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
	s1 = Sharp_GP2D12_estimation(sharp1);
     600:	0e 94 bd 02 	call	0x57a	; 0x57a <Sharp_GP2D12_estimation>
     604:	90 93 24 02 	sts	0x0224, r25
     608:	80 93 23 02 	sts	0x0223, r24
	sharp3 = ADC_Conversion(11);
     60c:	8b e0       	ldi	r24, 0x0B	; 11
     60e:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
	s3 = Sharp_GP2D12_estimation(sharp3);
     612:	0e 94 bd 02 	call	0x57a	; 0x57a <Sharp_GP2D12_estimation>
     616:	90 93 22 02 	sts	0x0222, r25
     61a:	80 93 21 02 	sts	0x0221, r24
	sharp5 = ADC_Conversion(13);
     61e:	8d e0       	ldi	r24, 0x0D	; 13
     620:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
	s5 = Sharp_GP2D12_estimation(sharp5);
     624:	0e 94 bd 02 	call	0x57a	; 0x57a <Sharp_GP2D12_estimation>
     628:	90 93 20 02 	sts	0x0220, r25
     62c:	80 93 1f 02 	sts	0x021F, r24
     630:	08 95       	ret

00000632 <__vector_6>:
unsigned char Right_white_line = 0;


//ISR for right position encoder
ISR(INT5_vect)
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	8f 93       	push	r24
     63e:	9f 93       	push	r25
     640:	af 93       	push	r26
     642:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     644:	80 91 17 02 	lds	r24, 0x0217
     648:	90 91 18 02 	lds	r25, 0x0218
     64c:	a0 91 19 02 	lds	r26, 0x0219
     650:	b0 91 1a 02 	lds	r27, 0x021A
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	a1 1d       	adc	r26, r1
     658:	b1 1d       	adc	r27, r1
     65a:	80 93 17 02 	sts	0x0217, r24
     65e:	90 93 18 02 	sts	0x0218, r25
     662:	a0 93 19 02 	sts	0x0219, r26
     666:	b0 93 1a 02 	sts	0x021A, r27
}
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	af 93       	push	r26
     68c:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     68e:	80 91 1b 02 	lds	r24, 0x021B
     692:	90 91 1c 02 	lds	r25, 0x021C
     696:	a0 91 1d 02 	lds	r26, 0x021D
     69a:	b0 91 1e 02 	lds	r27, 0x021E
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	a1 1d       	adc	r26, r1
     6a2:	b1 1d       	adc	r27, r1
     6a4:	80 93 1b 02 	sts	0x021B, r24
     6a8:	90 93 1c 02 	sts	0x021C, r25
     6ac:	a0 93 1d 02 	sts	0x021D, r26
     6b0:	b0 93 1e 02 	sts	0x021E, r27
}
     6b4:	bf 91       	pop	r27
     6b6:	af 91       	pop	r26
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     6c6:	e1 e2       	ldi	r30, 0x21	; 33
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     6d8:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     6dc:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     6e0:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     6e4:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     6e8:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     6ec:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     6f0:	89 ea       	ldi	r24, 0xA9	; 169
     6f2:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     6f6:	8b e0       	ldi	r24, 0x0B	; 11
     6f8:	80 83       	st	Z, r24
}
     6fa:	08 95       	ret

000006fc <motion_pin_config>:



void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     6fc:	81 b1       	in	r24, 0x01	; 1
     6fe:	8f 60       	ori	r24, 0x0F	; 15
     700:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     702:	82 b1       	in	r24, 0x02	; 2
     704:	80 7f       	andi	r24, 0xF0	; 240
     706:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     708:	ea e0       	ldi	r30, 0x0A	; 10
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	80 81       	ld	r24, Z
     70e:	88 61       	ori	r24, 0x18	; 24
     710:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     712:	eb e0       	ldi	r30, 0x0B	; 11
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	80 81       	ld	r24, Z
     718:	88 61       	ori	r24, 0x18	; 24
     71a:	80 83       	st	Z, r24
}
     71c:	08 95       	ret

0000071e <servo1_pin_config>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     71e:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     720:	2d 9a       	sbi	0x05, 5	; 5
}
     722:	08 95       	ret

00000724 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     724:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     726:	2e 9a       	sbi	0x05, 6	; 5
}
     728:	08 95       	ret

0000072a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     72a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     72c:	ea e6       	ldi	r30, 0x6A	; 106
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     736:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     738:	78 94       	sei
}
     73a:	08 95       	ret

0000073c <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			    // removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
     73c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     73e:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			    // removing upper nibbel as it is not needed
     740:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	    // adding lower nibbel for direction command and restoring the PORTA status
     742:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
     744:	92 b9       	out	0x02, r25	; 2
}
     746:	08 95       	ret

00000748 <right_position_encoder_interrupt_init>:


void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     748:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     74a:	ea e6       	ldi	r30, 0x6A	; 106
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 60       	ori	r24, 0x08	; 8
     752:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     754:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     756:	78 94       	sei
}
     758:	08 95       	ret

0000075a <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	0e 94 9e 03 	call	0x73c	; 0x73c <motion_set>
}
     760:	08 95       	ret

00000762 <back>:
void back (void) //both wheels backward
{
	motion_set(0x09);
     762:	89 e0       	ldi	r24, 0x09	; 9
     764:	0e 94 9e 03 	call	0x73c	; 0x73c <motion_set>
}
     768:	08 95       	ret

0000076a <left>:
void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     76a:	85 e0       	ldi	r24, 0x05	; 5
     76c:	0e 94 9e 03 	call	0x73c	; 0x73c <motion_set>
}
     770:	08 95       	ret

00000772 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	0e 94 9e 03 	call	0x73c	; 0x73c <motion_set>
}
     778:	08 95       	ret

0000077a <stop>:

void stop (void) //hard stop
{
	motion_set(0x00);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 9e 03 	call	0x73c	; 0x73c <motion_set>
}
     780:	08 95       	ret

00000782 <angle_rotate>:

void angle_rotate(unsigned int Degrees)
{
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     788:	bc 01       	movw	r22, r24
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__floatunsisf>
     792:	28 e4       	ldi	r18, 0x48	; 72
     794:	31 ee       	ldi	r19, 0xE1	; 225
     796:	42 e8       	ldi	r20, 0x82	; 130
     798:	50 e4       	ldi	r21, 0x40	; 64
     79a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     79e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fixunssfsi>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	a0 e0       	ldi	r26, 0x00	; 0
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     7aa:	10 92 17 02 	sts	0x0217, r1
     7ae:	10 92 18 02 	sts	0x0218, r1
     7b2:	10 92 19 02 	sts	0x0219, r1
     7b6:	10 92 1a 02 	sts	0x021A, r1
	ShaftCountLeft = 0;
     7ba:	10 92 1b 02 	sts	0x021B, r1
     7be:	10 92 1c 02 	sts	0x021C, r1
     7c2:	10 92 1d 02 	sts	0x021D, r1
     7c6:	10 92 1e 02 	sts	0x021E, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     7ca:	f1 e0       	ldi	r31, 0x01	; 1
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
     7ce:	40 91 17 02 	lds	r20, 0x0217
     7d2:	50 91 18 02 	lds	r21, 0x0218
     7d6:	60 91 19 02 	lds	r22, 0x0219
     7da:	70 91 1a 02 	lds	r23, 0x021A
     7de:	00 91 1b 02 	lds	r16, 0x021B
     7e2:	10 91 1c 02 	lds	r17, 0x021C
     7e6:	20 91 1d 02 	lds	r18, 0x021D
     7ea:	30 91 1e 02 	lds	r19, 0x021E
     7ee:	ef 2f       	mov	r30, r31
     7f0:	48 17       	cp	r20, r24
     7f2:	59 07       	cpc	r21, r25
     7f4:	6a 07       	cpc	r22, r26
     7f6:	7b 07       	cpc	r23, r27
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <angle_rotate+0x7a>
     7fa:	ec 2f       	mov	r30, r28
     7fc:	ee 23       	and	r30, r30
     7fe:	49 f4       	brne	.+18     	; 0x812 <angle_rotate+0x90>
     800:	4f 2f       	mov	r20, r31
     802:	08 17       	cp	r16, r24
     804:	19 07       	cpc	r17, r25
     806:	2a 07       	cpc	r18, r26
     808:	3b 07       	cpc	r19, r27
     80a:	08 f4       	brcc	.+2      	; 0x80e <angle_rotate+0x8c>
     80c:	4c 2f       	mov	r20, r28
     80e:	44 23       	and	r20, r20
     810:	f1 f2       	breq	.-68     	; 0x7ce <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     812:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
}
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     824:	0e 94 b5 03 	call	0x76a	; 0x76a <left>
	angle_rotate(Degrees);
     828:	ce 01       	movw	r24, r28
     82a:	0e 94 c1 03 	call	0x782	; 0x782 <angle_rotate>
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     834:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     838:	60 93 2a 01 	sts	0x012A, r22
}
     83c:	08 95       	ret

0000083e <get_white_sensor_values>:
void get_white_sensor_values()
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
     844:	80 93 16 02 	sts	0x0216, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
     84e:	80 93 15 02 	sts	0x0215, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_Conversion>
     858:	80 93 14 02 	sts	0x0214, r24
	
}
     85c:	08 95       	ret

0000085e <line_follow>:


//--------------------------Line follow-----------------------//
void line_follow(){
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
	unsigned char flag = 0;
	while(1)
	{

		get_white_sensor_values();
		flag=0;
     862:	d0 e0       	ldi	r29, 0x00	; 0
	int var=20;
	unsigned char flag = 0;
	while(1)
	{

		get_white_sensor_values();
     864:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
		flag=0;

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	43 e0       	ldi	r20, 0x03	; 3
     86e:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	65 e0       	ldi	r22, 0x05	; 5
     876:	42 e0       	ldi	r20, 0x02	; 2
     878:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	69 e0       	ldi	r22, 0x09	; 9
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
		
		if(Center_white_line>var)
     886:	80 91 15 02 	lds	r24, 0x0215
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	85 31       	cpi	r24, 0x15	; 21
     88e:	91 05       	cpc	r25, r1
     890:	44 f0       	brlt	.+16     	; 0x8a2 <line_follow+0x44>
		{
			flag=1;
			forward();
     892:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(220,220);
     896:	8c ed       	ldi	r24, 0xDC	; 220
     898:	6c ed       	ldi	r22, 0xDC	; 220
     89a:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		if(Center_white_line>var)
		{
			flag=1;
     89e:	c1 e0       	ldi	r28, 0x01	; 1
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <line_follow+0x46>
	unsigned char flag = 0;
	while(1)
	{

		get_white_sensor_values();
		flag=0;
     8a2:	cd 2f       	mov	r28, r29
			forward();
			velocity(220,220);
			//velocity(170,170);
		}

		if (Left_white_line>var && Center_white_line>var && Right_white_line>var)
     8a4:	80 91 16 02 	lds	r24, 0x0216
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	85 31       	cpi	r24, 0x15	; 21
     8ac:	91 05       	cpc	r25, r1
     8ae:	0c f4       	brge	.+2      	; 0x8b2 <line_follow+0x54>
     8b0:	4b c0       	rjmp	.+150    	; 0x948 <line_follow+0xea>
     8b2:	80 91 15 02 	lds	r24, 0x0215
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	85 31       	cpi	r24, 0x15	; 21
     8ba:	91 05       	cpc	r25, r1
     8bc:	3c f1       	brlt	.+78     	; 0x90c <line_follow+0xae>
     8be:	80 91 14 02 	lds	r24, 0x0214
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	85 31       	cpi	r24, 0x15	; 21
     8c6:	91 05       	cpc	r25, r1
     8c8:	0c f1       	brlt	.+66     	; 0x90c <line_follow+0xae>
		{
			lcd_cursor(2,1);
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
			lcd_string("All");
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
			stop();
     8da:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			buzzer_on();
     8de:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	9f e7       	ldi	r25, 0x7F	; 127
     8e6:	a6 e1       	ldi	r26, 0x16	; 22
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	a0 40       	sbci	r26, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <line_follow+0x8a>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <line_follow+0x94>
     8f2:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
     8f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	9f e7       	ldi	r25, 0x7F	; 127
     8fc:	a6 e1       	ldi	r26, 0x16	; 22
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	90 40       	sbci	r25, 0x00	; 0
     902:	a0 40       	sbci	r26, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <line_follow+0xa0>
     906:	00 c0       	rjmp	.+0      	; 0x908 <line_follow+0xaa>
     908:	00 00       	nop
     90a:	95 c0       	rjmp	.+298    	; 0xa36 <line_follow+0x1d8>
			_delay_ms(500);
			break;
		}
		
		if((Left_white_line>var) && (flag==0))
     90c:	cc 23       	and	r28, r28
     90e:	e1 f4       	brne	.+56     	; 0x948 <line_follow+0xea>
		{
			//flag=1;
			left();
     910:	0e 94 b5 03 	call	0x76a	; 0x76a <left>
			velocity(130,130);
     914:	82 e8       	ldi	r24, 0x82	; 130
     916:	62 e8       	ldi	r22, 0x82	; 130
     918:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while(1)
			{
				get_white_sensor_values();
     91c:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
				if(Left_white_line <var && Center_white_line>var && Right_white_line<var)
     920:	80 91 16 02 	lds	r24, 0x0216
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	84 31       	cpi	r24, 0x14	; 20
     928:	91 05       	cpc	r25, r1
     92a:	c4 f7       	brge	.-16     	; 0x91c <line_follow+0xbe>
     92c:	80 91 15 02 	lds	r24, 0x0215
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	85 31       	cpi	r24, 0x15	; 21
     934:	91 05       	cpc	r25, r1
     936:	94 f3       	brlt	.-28     	; 0x91c <line_follow+0xbe>
     938:	80 91 14 02 	lds	r24, 0x0214
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	84 31       	cpi	r24, 0x14	; 20
     940:	91 05       	cpc	r25, r1
     942:	64 f7       	brge	.-40     	; 0x91c <line_follow+0xbe>
				{
					stop();
     944:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
				}
			}
			//velocity(175,175);
		}

		if((Right_white_line>var) && (flag==0))
     948:	80 91 14 02 	lds	r24, 0x0214
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	85 31       	cpi	r24, 0x15	; 21
     950:	91 05       	cpc	r25, r1
     952:	f4 f0       	brlt	.+60     	; 0x990 <line_follow+0x132>
     954:	cc 23       	and	r28, r28
     956:	e1 f4       	brne	.+56     	; 0x990 <line_follow+0x132>
		{
			//flag=1;
			right();
     958:	0e 94 b9 03 	call	0x772	; 0x772 <right>
			velocity(130,130);
     95c:	82 e8       	ldi	r24, 0x82	; 130
     95e:	62 e8       	ldi	r22, 0x82	; 130
     960:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while(1)
			{
				get_white_sensor_values();
     964:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
				if(Left_white_line <var && Center_white_line>var && Right_white_line<var)
     968:	80 91 16 02 	lds	r24, 0x0216
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	84 31       	cpi	r24, 0x14	; 20
     970:	91 05       	cpc	r25, r1
     972:	c4 f7       	brge	.-16     	; 0x964 <line_follow+0x106>
     974:	80 91 15 02 	lds	r24, 0x0215
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	85 31       	cpi	r24, 0x15	; 21
     97c:	91 05       	cpc	r25, r1
     97e:	94 f3       	brlt	.-28     	; 0x964 <line_follow+0x106>
     980:	80 91 14 02 	lds	r24, 0x0214
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	84 31       	cpi	r24, 0x14	; 20
     988:	91 05       	cpc	r25, r1
     98a:	64 f7       	brge	.-40     	; 0x964 <line_follow+0x106>
				{
					stop();
     98c:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
					break;
				}
			}//velocity(175,175);
		}
		if((Left_white_line>var) && (flag==1))
     990:	80 91 16 02 	lds	r24, 0x0216
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	85 31       	cpi	r24, 0x15	; 21
     998:	91 05       	cpc	r25, r1
     99a:	1c f1       	brlt	.+70     	; 0x9e2 <line_follow+0x184>
     99c:	c1 30       	cpi	r28, 0x01	; 1
     99e:	09 f5       	brne	.+66     	; 0x9e2 <line_follow+0x184>
		{
			stop();
     9a0:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			lcd_cursor(2,1);
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
			lcd_string("Left");
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
			buzzer_on();
     9b4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	9f e7       	ldi	r25, 0x7F	; 127
     9bc:	a6 e1       	ldi	r26, 0x16	; 22
     9be:	81 50       	subi	r24, 0x01	; 1
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	a0 40       	sbci	r26, 0x00	; 0
     9c4:	e1 f7       	brne	.-8      	; 0x9be <line_follow+0x160>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <line_follow+0x16a>
     9c8:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
     9ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	9f e7       	ldi	r25, 0x7F	; 127
     9d2:	a6 e1       	ldi	r26, 0x16	; 22
     9d4:	81 50       	subi	r24, 0x01	; 1
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	a0 40       	sbci	r26, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <line_follow+0x176>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <line_follow+0x180>
     9de:	00 00       	nop
     9e0:	2a c0       	rjmp	.+84     	; 0xa36 <line_follow+0x1d8>
			_delay_ms(500);
			break;
		}

		if((Right_white_line>var) && (flag==1))
     9e2:	80 91 14 02 	lds	r24, 0x0214
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	85 31       	cpi	r24, 0x15	; 21
     9ea:	91 05       	cpc	r25, r1
     9ec:	0c f4       	brge	.+2      	; 0x9f0 <line_follow+0x192>
     9ee:	3a cf       	rjmp	.-396    	; 0x864 <line_follow+0x6>
     9f0:	c1 30       	cpi	r28, 0x01	; 1
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <line_follow+0x198>
     9f4:	37 cf       	rjmp	.-402    	; 0x864 <line_follow+0x6>
		{
			stop();
     9f6:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			lcd_cursor(2,1);
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
			lcd_string("Right");
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
			buzzer_on();
     a0a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	9f e7       	ldi	r25, 0x7F	; 127
     a12:	a6 e1       	ldi	r26, 0x16	; 22
     a14:	81 50       	subi	r24, 0x01	; 1
     a16:	90 40       	sbci	r25, 0x00	; 0
     a18:	a0 40       	sbci	r26, 0x00	; 0
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <line_follow+0x1b6>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <line_follow+0x1c0>
     a1e:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
     a20:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	9f e7       	ldi	r25, 0x7F	; 127
     a28:	a6 e1       	ldi	r26, 0x16	; 22
     a2a:	81 50       	subi	r24, 0x01	; 1
     a2c:	90 40       	sbci	r25, 0x00	; 0
     a2e:	a0 40       	sbci	r26, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <line_follow+0x1cc>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <line_follow+0x1d6>
     a34:	00 00       	nop
			_delay_ms(500);
			break;
		}
	}
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <lineFollower>:
void lineFollower(){
     a3c:	cf 93       	push	r28
	get_white_sensor_values();
     a3e:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
	unsigned char flag = 0;
	unsigned char var = 20;
	print_sensor(1,1,3);	//Prints value of White Line Sensor1
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	43 e0       	ldi	r20, 0x03	; 3
     a48:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
	print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	65 e0       	ldi	r22, 0x05	; 5
     a50:	42 e0       	ldi	r20, 0x02	; 2
     a52:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
	print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	69 e0       	ldi	r22, 0x09	; 9
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
	
	if(Center_white_line>var)
     a60:	80 91 15 02 	lds	r24, 0x0215
     a64:	85 31       	cpi	r24, 0x15	; 21
     a66:	40 f0       	brcs	.+16     	; 0xa78 <lineFollower+0x3c>
	{
		flag=1;
		forward();
     a68:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
		velocity(220,220);
     a6c:	8c ed       	ldi	r24, 0xDC	; 220
     a6e:	6c ed       	ldi	r22, 0xDC	; 220
     a70:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
	print_sensor(1,5,2);	//Prints Value of White Line Sensor2
	print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
	if(Center_white_line>var)
	{
		flag=1;
     a74:	c1 e0       	ldi	r28, 0x01	; 1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <lineFollower+0x3e>
		}
	}
}
void lineFollower(){
	get_white_sensor_values();
	unsigned char flag = 0;
     a78:	c0 e0       	ldi	r28, 0x00	; 0
		forward();
		velocity(220,220);
		//velocity(170,170);
	}

	if (Left_white_line>var && Center_white_line>var && Right_white_line>var)
     a7a:	80 91 16 02 	lds	r24, 0x0216
     a7e:	85 31       	cpi	r24, 0x15	; 21
     a80:	08 f4       	brcc	.+2      	; 0xa84 <lineFollower+0x48>
     a82:	44 c0       	rjmp	.+136    	; 0xb0c <lineFollower+0xd0>
     a84:	80 91 15 02 	lds	r24, 0x0215
     a88:	85 31       	cpi	r24, 0x15	; 21
     a8a:	40 f1       	brcs	.+80     	; 0xadc <lineFollower+0xa0>
     a8c:	80 91 14 02 	lds	r24, 0x0214
     a90:	85 31       	cpi	r24, 0x15	; 21
     a92:	20 f1       	brcs	.+72     	; 0xadc <lineFollower+0xa0>
	{
		lcd_cursor(2,1);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
		lcd_string("All");
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
		stop();
     aa4:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
		buzzer_on();
     aa8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	9f e7       	ldi	r25, 0x7F	; 127
     ab0:	a6 e1       	ldi	r26, 0x16	; 22
     ab2:	81 50       	subi	r24, 0x01	; 1
     ab4:	90 40       	sbci	r25, 0x00	; 0
     ab6:	a0 40       	sbci	r26, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <lineFollower+0x76>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <lineFollower+0x80>
     abc:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
     abe:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	9f e7       	ldi	r25, 0x7F	; 127
     ac6:	a6 e1       	ldi	r26, 0x16	; 22
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	90 40       	sbci	r25, 0x00	; 0
     acc:	a0 40       	sbci	r26, 0x00	; 0
     ace:	e1 f7       	brne	.-8      	; 0xac8 <lineFollower+0x8c>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <lineFollower+0x96>
     ad2:	00 00       	nop
		_delay_ms(500);
		
	}
	
	if((Left_white_line>var) && (flag==0))
     ad4:	80 91 16 02 	lds	r24, 0x0216
     ad8:	85 31       	cpi	r24, 0x15	; 21
     ada:	c0 f0       	brcs	.+48     	; 0xb0c <lineFollower+0xd0>
     adc:	cc 23       	and	r28, r28
     ade:	b1 f4       	brne	.+44     	; 0xb0c <lineFollower+0xd0>
	{
		//flag=1;
		left();
     ae0:	0e 94 b5 03 	call	0x76a	; 0x76a <left>
		velocity(130,130);
     ae4:	82 e8       	ldi	r24, 0x82	; 130
     ae6:	62 e8       	ldi	r22, 0x82	; 130
     ae8:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
		while(1)
		{
			get_white_sensor_values();
     aec:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
			if(Left_white_line <var && Center_white_line>var && Right_white_line<var)
     af0:	80 91 16 02 	lds	r24, 0x0216
     af4:	84 31       	cpi	r24, 0x14	; 20
     af6:	d0 f7       	brcc	.-12     	; 0xaec <lineFollower+0xb0>
     af8:	80 91 15 02 	lds	r24, 0x0215
     afc:	85 31       	cpi	r24, 0x15	; 21
     afe:	b0 f3       	brcs	.-20     	; 0xaec <lineFollower+0xb0>
     b00:	80 91 14 02 	lds	r24, 0x0214
     b04:	84 31       	cpi	r24, 0x14	; 20
     b06:	90 f7       	brcc	.-28     	; 0xaec <lineFollower+0xb0>
			{
				stop();
     b08:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			}
		}
		//velocity(175,175);
	}

	if((Right_white_line>var) && (flag==0))
     b0c:	80 91 14 02 	lds	r24, 0x0214
     b10:	85 31       	cpi	r24, 0x15	; 21
     b12:	c0 f0       	brcs	.+48     	; 0xb44 <lineFollower+0x108>
     b14:	cc 23       	and	r28, r28
     b16:	b1 f4       	brne	.+44     	; 0xb44 <lineFollower+0x108>
	{
		//flag=1;
		right();
     b18:	0e 94 b9 03 	call	0x772	; 0x772 <right>
		velocity(130,130);
     b1c:	82 e8       	ldi	r24, 0x82	; 130
     b1e:	62 e8       	ldi	r22, 0x82	; 130
     b20:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
		while(1)
		{
			get_white_sensor_values();
     b24:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
			if(Left_white_line <var && Center_white_line>var && Right_white_line<var)
     b28:	80 91 16 02 	lds	r24, 0x0216
     b2c:	84 31       	cpi	r24, 0x14	; 20
     b2e:	d0 f7       	brcc	.-12     	; 0xb24 <lineFollower+0xe8>
     b30:	80 91 15 02 	lds	r24, 0x0215
     b34:	85 31       	cpi	r24, 0x15	; 21
     b36:	b0 f3       	brcs	.-20     	; 0xb24 <lineFollower+0xe8>
     b38:	80 91 14 02 	lds	r24, 0x0214
     b3c:	84 31       	cpi	r24, 0x14	; 20
     b3e:	90 f7       	brcc	.-28     	; 0xb24 <lineFollower+0xe8>
			{
				stop();
     b40:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
				break;
			}
		}//velocity(175,175);
	}
	if((Left_white_line>var) && (flag==1))
     b44:	80 91 16 02 	lds	r24, 0x0216
     b48:	85 31       	cpi	r24, 0x15	; 21
     b4a:	10 f1       	brcs	.+68     	; 0xb90 <lineFollower+0x154>
     b4c:	c1 30       	cpi	r28, 0x01	; 1
     b4e:	01 f5       	brne	.+64     	; 0xb90 <lineFollower+0x154>
	{
		stop();
     b50:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
		lcd_cursor(2,1);
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
		lcd_string("Left");
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
		buzzer_on();
     b64:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	9f e7       	ldi	r25, 0x7F	; 127
     b6c:	a6 e1       	ldi	r26, 0x16	; 22
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	a0 40       	sbci	r26, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <lineFollower+0x132>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <lineFollower+0x13c>
     b78:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
     b7a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	9f e7       	ldi	r25, 0x7F	; 127
     b82:	a6 e1       	ldi	r26, 0x16	; 22
     b84:	81 50       	subi	r24, 0x01	; 1
     b86:	90 40       	sbci	r25, 0x00	; 0
     b88:	a0 40       	sbci	r26, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <lineFollower+0x148>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <lineFollower+0x152>
     b8e:	00 00       	nop
		_delay_ms(500);
		
	}

	if((Right_white_line>var) && (flag==1))
     b90:	80 91 14 02 	lds	r24, 0x0214
     b94:	85 31       	cpi	r24, 0x15	; 21
     b96:	10 f1       	brcs	.+68     	; 0xbdc <lineFollower+0x1a0>
     b98:	c1 30       	cpi	r28, 0x01	; 1
     b9a:	01 f5       	brne	.+64     	; 0xbdc <lineFollower+0x1a0>
	{
		stop();
     b9c:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
		lcd_cursor(2,1);
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
		lcd_string("Right");
     ba8:	89 e0       	ldi	r24, 0x09	; 9
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
		buzzer_on();
     bb0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	9f e7       	ldi	r25, 0x7F	; 127
     bb8:	a6 e1       	ldi	r26, 0x16	; 22
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	a0 40       	sbci	r26, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <lineFollower+0x17e>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <lineFollower+0x188>
     bc4:	00 00       	nop
		_delay_ms(500);
		buzzer_off();
     bc6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	9f e7       	ldi	r25, 0x7F	; 127
     bce:	a6 e1       	ldi	r26, 0x16	; 22
     bd0:	81 50       	subi	r24, 0x01	; 1
     bd2:	90 40       	sbci	r25, 0x00	; 0
     bd4:	a0 40       	sbci	r26, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <lineFollower+0x194>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <lineFollower+0x19e>
     bda:	00 00       	nop
		_delay_ms(500);
		
	}
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     be6:	0e 94 b9 03 	call	0x772	; 0x772 <right>
	angle_rotate(Degrees);
     bea:	ce 01       	movw	r24, r28
     bec:	0e 94 c1 03 	call	0x782	; 0x782 <angle_rotate>
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     bf6:	e1 e8       	ldi	r30, 0x81	; 129
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     bfc:	8c ef       	ldi	r24, 0xFC	; 252
     bfe:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     c08:	93 e0       	ldi	r25, 0x03	; 3
     c0a:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     c14:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     c18:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     c1c:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     c20:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     c24:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     c28:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     c2c:	8b ea       	ldi	r24, 0xAB	; 171
     c2e:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     c32:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     c36:	8c e0       	ldi	r24, 0x0C	; 12
     c38:	80 83       	st	Z, r24
}
     c3a:	08 95       	ret

00000c3c <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     c3c:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     c40:	68 2f       	mov	r22, r24
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__floatunsisf>
     c4c:	2b e7       	ldi	r18, 0x7B	; 123
     c4e:	34 e1       	ldi	r19, 0x14	; 20
     c50:	4e ee       	ldi	r20, 0xEE	; 238
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divsf3>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	4c e0       	ldi	r20, 0x0C	; 12
     c5e:	52 e4       	ldi	r21, 0x42	; 66
     c60:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     c64:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fixunssfsi>
     c68:	60 93 88 00 	sts	0x0088, r22
}
     c6c:	08 95       	ret

00000c6e <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     c6e:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     c72:	68 2f       	mov	r22, r24
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__floatunsisf>
     c7e:	2b e7       	ldi	r18, 0x7B	; 123
     c80:	34 e1       	ldi	r19, 0x14	; 20
     c82:	4e ee       	ldi	r20, 0xEE	; 238
     c84:	5f e3       	ldi	r21, 0x3F	; 63
     c86:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__divsf3>
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	4c e0       	ldi	r20, 0x0C	; 12
     c90:	52 e4       	ldi	r21, 0x42	; 66
     c92:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__addsf3>
	OCR1BH = 0x00;
	OCR1BL = (unsigned char) PositionTiltServo;
     c96:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fixunssfsi>
     c9a:	60 93 8a 00 	sts	0x008A, r22
}
     c9e:	08 95       	ret

00000ca0 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 93 88 00 	sts	0x0088, r24
}
     cac:	08 95       	ret

00000cae <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
	OCR1BH = 0x03;
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xFF; //Servo 2 off
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	80 93 8a 00 	sts	0x008A, r24
}
     cba:	08 95       	ret

00000cbc <moveArmDown>:



void moveArmDown(){
     cbc:	cf 93       	push	r28
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
	
	unsigned int i;
	for (i = 0; i <55; i++)//servo motor 2 for the downward the arm
	{
		servo_2(i);
     cc0:	8c 2f       	mov	r24, r28
     cc2:	0e 94 37 06 	call	0xc6e	; 0xc6e <servo_2>
     cc6:	89 e9       	ldi	r24, 0x99	; 153
     cc8:	99 e5       	ldi	r25, 0x59	; 89
     cca:	a1 e0       	ldi	r26, 0x01	; 1
     ccc:	81 50       	subi	r24, 0x01	; 1
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	a0 40       	sbci	r26, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <moveArmDown+0x10>
     cd4:	00 00       	nop
     cd6:	cf 5f       	subi	r28, 0xFF	; 255


void moveArmDown(){
	
	unsigned int i;
	for (i = 0; i <55; i++)//servo motor 2 for the downward the arm
     cd8:	c7 33       	cpi	r28, 0x37	; 55
     cda:	91 f7       	brne	.-28     	; 0xcc0 <moveArmDown+0x4>
	{
		servo_2(i);
		_delay_ms(30);
	}
}
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <grip>:

void grip(){
     ce0:	cf 93       	push	r28
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
	
	unsigned int i;
	for (i = 0; i <25; i++)//servo_1 for gripping
	{
		servo_1(i);
     ce4:	8c 2f       	mov	r24, r28
     ce6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <servo_1>
     cea:	89 e9       	ldi	r24, 0x99	; 153
     cec:	99 e5       	ldi	r25, 0x59	; 89
     cee:	a1 e0       	ldi	r26, 0x01	; 1
     cf0:	81 50       	subi	r24, 0x01	; 1
     cf2:	90 40       	sbci	r25, 0x00	; 0
     cf4:	a0 40       	sbci	r26, 0x00	; 0
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <grip+0x10>
     cf8:	00 00       	nop
     cfa:	cf 5f       	subi	r28, 0xFF	; 255
}

void grip(){
	
	unsigned int i;
	for (i = 0; i <25; i++)//servo_1 for gripping
     cfc:	c9 31       	cpi	r28, 0x19	; 25
     cfe:	91 f7       	brne	.-28     	; 0xce4 <grip+0x4>
	{
		servo_1(i);
		_delay_ms(30);
	}
}
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <moveArmUp>:
void moveArmUp(){
     d04:	cf 93       	push	r28
     d06:	c0 e0       	ldi	r28, 0x00	; 0
	
	unsigned int i;
	for(i = 0;i<8;i++) //servo_2 for upward motion of arm
	{
		servo_2(i);
     d08:	8c 2f       	mov	r24, r28
     d0a:	0e 94 37 06 	call	0xc6e	; 0xc6e <servo_2>
     d0e:	89 e9       	ldi	r24, 0x99	; 153
     d10:	99 e5       	ldi	r25, 0x59	; 89
     d12:	a1 e0       	ldi	r26, 0x01	; 1
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	a0 40       	sbci	r26, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <moveArmUp+0x10>
     d1c:	00 00       	nop
     d1e:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void moveArmUp(){
	
	unsigned int i;
	for(i = 0;i<8;i++) //servo_2 for upward motion of arm
     d20:	c8 30       	cpi	r28, 0x08	; 8
     d22:	91 f7       	brne	.-28     	; 0xd08 <moveArmUp+0x4>
	{
		servo_2(i);
		_delay_ms(30);
	}
}
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <ungrip>:

void ungrip(){
     d28:	cf 93       	push	r28
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
	
	unsigned int i;
	for(i = 0;i<5;i++)//servo_1 for relase the grip
	{
		servo_1(i);
     d2c:	8c 2f       	mov	r24, r28
     d2e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <servo_1>
     d32:	89 e9       	ldi	r24, 0x99	; 153
     d34:	99 e5       	ldi	r25, 0x59	; 89
     d36:	a1 e0       	ldi	r26, 0x01	; 1
     d38:	81 50       	subi	r24, 0x01	; 1
     d3a:	90 40       	sbci	r25, 0x00	; 0
     d3c:	a0 40       	sbci	r26, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <ungrip+0x10>
     d40:	00 00       	nop
     d42:	cf 5f       	subi	r28, 0xFF	; 255
}

void ungrip(){
	
	unsigned int i;
	for(i = 0;i<5;i++)//servo_1 for relase the grip
     d44:	c5 30       	cpi	r28, 0x05	; 5
     d46:	91 f7       	brne	.-28     	; 0xd2c <ungrip+0x4>
	{
		servo_1(i);
		_delay_ms(30);
	}
}
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <pick>:
void pick(){
	
	moveArmDown();
     d4c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <moveArmDown>
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	9f ef       	ldi	r25, 0xFF	; 255
     d54:	ac e2       	ldi	r26, 0x2C	; 44
     d56:	81 50       	subi	r24, 0x01	; 1
     d58:	90 40       	sbci	r25, 0x00	; 0
     d5a:	a0 40       	sbci	r26, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <pick+0xa>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <pick+0x14>
     d60:	00 00       	nop
	_delay_ms(1000);
	grip();
     d62:	0e 94 70 06 	call	0xce0	; 0xce0 <grip>
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	9f ef       	ldi	r25, 0xFF	; 255
     d6a:	ac e2       	ldi	r26, 0x2C	; 44
     d6c:	81 50       	subi	r24, 0x01	; 1
     d6e:	90 40       	sbci	r25, 0x00	; 0
     d70:	a0 40       	sbci	r26, 0x00	; 0
     d72:	e1 f7       	brne	.-8      	; 0xd6c <pick+0x20>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <pick+0x2a>
     d76:	00 00       	nop
	_delay_ms(1000);
	moveArmUp();
     d78:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	ac e2       	ldi	r26, 0x2C	; 44
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	90 40       	sbci	r25, 0x00	; 0
     d86:	a0 40       	sbci	r26, 0x00	; 0
     d88:	e1 f7       	brne	.-8      	; 0xd82 <pick+0x36>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <pick+0x40>
     d8c:	00 00       	nop
	_delay_ms(1000);
}
     d8e:	08 95       	ret

00000d90 <place>:
void place(){
	moveArmDown();
     d90:	0e 94 5e 06 	call	0xcbc	; 0xcbc <moveArmDown>
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	9f ef       	ldi	r25, 0xFF	; 255
     d98:	ac e2       	ldi	r26, 0x2C	; 44
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	90 40       	sbci	r25, 0x00	; 0
     d9e:	a0 40       	sbci	r26, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <place+0xa>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <place+0x14>
     da4:	00 00       	nop
	_delay_ms(1000);
	ungrip();
     da6:	0e 94 94 06 	call	0xd28	; 0xd28 <ungrip>
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	9f ef       	ldi	r25, 0xFF	; 255
     dae:	ac e2       	ldi	r26, 0x2C	; 44
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	90 40       	sbci	r25, 0x00	; 0
     db4:	a0 40       	sbci	r26, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <place+0x20>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <place+0x2a>
     dba:	00 00       	nop
	_delay_ms(1000);
     dbc:	08 95       	ret

00000dbe <wallFollowS5>:
#include "arm_util.h"

unsigned int lim1=5,lim2=780;


void wallFollowS5(int d){
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	ec 01       	movw	r28, r24
	get_sharp_sensor_values();
     dcc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
	get_white_sensor_values();
     dd0:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
	while(s5 < lim2 && (d>=0 && d <  400 ))
     dd4:	80 91 1f 02 	lds	r24, 0x021F
     dd8:	90 91 20 02 	lds	r25, 0x0220
     ddc:	20 91 0f 02 	lds	r18, 0x020F
     de0:	30 91 10 02 	lds	r19, 0x0210
     de4:	82 17       	cp	r24, r18
     de6:	93 07       	cpc	r25, r19
     de8:	08 f0       	brcs	.+2      	; 0xdec <wallFollowS5+0x2e>
     dea:	33 c1       	rjmp	.+614    	; 0x1052 <wallFollowS5+0x294>
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	c0 39       	cpi	r28, 0x90	; 144
     df0:	d2 07       	cpc	r29, r18
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <wallFollowS5+0x38>
     df4:	2e c1       	rjmp	.+604    	; 0x1052 <wallFollowS5+0x294>
				lcd_print(1,1,s1,3);
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
				lcd_print(2,1,d,3);
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
					d=500;
     df6:	0f 2e       	mov	r0, r31
     df8:	f4 ef       	ldi	r31, 0xF4	; 244
     dfa:	ef 2e       	mov	r14, r31
     dfc:	f1 e0       	ldi	r31, 0x01	; 1
     dfe:	ff 2e       	mov	r15, r31
     e00:	f0 2d       	mov	r31, r0
void wallFollowS5(int d){
	get_sharp_sensor_values();
	get_white_sensor_values();
	while(s5 < lim2 && (d>=0 && d <  400 ))
	{
		if (s5 < 328)
     e02:	a1 e0       	ldi	r26, 0x01	; 1
     e04:	88 34       	cpi	r24, 0x48	; 72
     e06:	9a 07       	cpc	r25, r26
     e08:	08 f0       	brcs	.+2      	; 0xe0c <wallFollowS5+0x4e>
     e0a:	5e c0       	rjmp	.+188    	; 0xec8 <wallFollowS5+0x10a>
		{
			forward();
     e0c:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(150,165);
     e10:	86 e9       	ldi	r24, 0x96	; 150
     e12:	65 ea       	ldi	r22, 0xA5	; 165
     e14:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while (s5<328 && (d>=0 && d <  400 ) )
     e18:	80 91 1f 02 	lds	r24, 0x021F
     e1c:	90 91 20 02 	lds	r25, 0x0220
     e20:	b1 e0       	ldi	r27, 0x01	; 1
     e22:	88 34       	cpi	r24, 0x48	; 72
     e24:	9b 07       	cpc	r25, r27
     e26:	08 f0       	brcs	.+2      	; 0xe2a <wallFollowS5+0x6c>
     e28:	4f c0       	rjmp	.+158    	; 0xec8 <wallFollowS5+0x10a>
     e2a:	1c 2f       	mov	r17, r28
     e2c:	0d 2f       	mov	r16, r29
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	c0 39       	cpi	r28, 0x90	; 144
     e32:	d2 07       	cpc	r29, r18
     e34:	08 f0       	brcs	.+2      	; 0xe38 <wallFollowS5+0x7a>
     e36:	48 c0       	rjmp	.+144    	; 0xec8 <wallFollowS5+0x10a>
			{
				get_sharp_sensor_values();
     e38:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				lcd_print(1,1,s1,3);
     e3c:	40 91 23 02 	lds	r20, 0x0223
     e40:	50 91 24 02 	lds	r21, 0x0224
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	23 e0       	ldi	r18, 0x03	; 3
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,5,s3,3);
     e50:	40 91 21 02 	lds	r20, 0x0221
     e54:	50 91 22 02 	lds	r21, 0x0222
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	23 e0       	ldi	r18, 0x03	; 3
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,10,s5,3);
     e64:	40 91 1f 02 	lds	r20, 0x021F
     e68:	50 91 20 02 	lds	r21, 0x0220
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	23 e0       	ldi	r18, 0x03	; 3
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(2,1,d,3);
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	41 2f       	mov	r20, r17
     e7e:	50 2f       	mov	r21, r16
     e80:	23 e0       	ldi	r18, 0x03	; 3
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
     e88:	80 91 15 02 	lds	r24, 0x0215
     e8c:	84 31       	cpi	r24, 0x14	; 20
     e8e:	40 f4       	brcc	.+16     	; 0xea0 <wallFollowS5+0xe2>
     e90:	80 91 16 02 	lds	r24, 0x0216
     e94:	85 31       	cpi	r24, 0x15	; 21
     e96:	20 f4       	brcc	.+8      	; 0xea0 <wallFollowS5+0xe2>
     e98:	80 91 14 02 	lds	r24, 0x0214
     e9c:	85 31       	cpi	r24, 0x15	; 21
     e9e:	20 f0       	brcs	.+8      	; 0xea8 <wallFollowS5+0xea>
					d=500;
					lineFollower();
     ea0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lineFollower>
				lcd_print(1,1,s1,3);
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
				lcd_print(2,1,d,3);
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
					d=500;
     ea4:	e7 01       	movw	r28, r14
					lineFollower();
					break;
     ea6:	10 c0       	rjmp	.+32     	; 0xec8 <wallFollowS5+0x10a>
				}
				d--;
     ea8:	21 97       	sbiw	r28, 0x01	; 1
	{
		if (s5 < 328)
		{
			forward();
			velocity(150,165);
			while (s5<328 && (d>=0 && d <  400 ) )
     eaa:	80 91 1f 02 	lds	r24, 0x021F
     eae:	90 91 20 02 	lds	r25, 0x0220
     eb2:	a1 e0       	ldi	r26, 0x01	; 1
     eb4:	88 34       	cpi	r24, 0x48	; 72
     eb6:	9a 07       	cpc	r25, r26
     eb8:	38 f4       	brcc	.+14     	; 0xec8 <wallFollowS5+0x10a>
     eba:	1c 2f       	mov	r17, r28
     ebc:	0d 2f       	mov	r16, r29
     ebe:	b1 e0       	ldi	r27, 0x01	; 1
     ec0:	c0 39       	cpi	r28, 0x90	; 144
     ec2:	db 07       	cpc	r29, r27
     ec4:	08 f4       	brcc	.+2      	; 0xec8 <wallFollowS5+0x10a>
     ec6:	b8 cf       	rjmp	.-144    	; 0xe38 <wallFollowS5+0x7a>
					break;
				}
				d--;
			}
		}
		if(s5 > 328 && s5 < 700)
     ec8:	80 91 1f 02 	lds	r24, 0x021F
     ecc:	90 91 20 02 	lds	r25, 0x0220
     ed0:	89 54       	subi	r24, 0x49	; 73
     ed2:	91 40       	sbci	r25, 0x01	; 1
     ed4:	21 e0       	ldi	r18, 0x01	; 1
     ed6:	83 37       	cpi	r24, 0x73	; 115
     ed8:	92 07       	cpc	r25, r18
     eda:	08 f0       	brcs	.+2      	; 0xede <wallFollowS5+0x120>
     edc:	5e c0       	rjmp	.+188    	; 0xf9a <wallFollowS5+0x1dc>
		{
			forward();
     ede:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(170,140);
     ee2:	8a ea       	ldi	r24, 0xAA	; 170
     ee4:	6c e8       	ldi	r22, 0x8C	; 140
     ee6:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while (s5 > 328  && (d>=0 && d <  400 ) )
     eea:	80 91 1f 02 	lds	r24, 0x021F
     eee:	90 91 20 02 	lds	r25, 0x0220
     ef2:	a1 e0       	ldi	r26, 0x01	; 1
     ef4:	89 34       	cpi	r24, 0x49	; 73
     ef6:	9a 07       	cpc	r25, r26
     ef8:	08 f4       	brcc	.+2      	; 0xefc <wallFollowS5+0x13e>
     efa:	4f c0       	rjmp	.+158    	; 0xf9a <wallFollowS5+0x1dc>
     efc:	1c 2f       	mov	r17, r28
     efe:	0d 2f       	mov	r16, r29
     f00:	b1 e0       	ldi	r27, 0x01	; 1
     f02:	c0 39       	cpi	r28, 0x90	; 144
     f04:	db 07       	cpc	r29, r27
     f06:	08 f0       	brcs	.+2      	; 0xf0a <wallFollowS5+0x14c>
     f08:	48 c0       	rjmp	.+144    	; 0xf9a <wallFollowS5+0x1dc>
			{
				lcd_print(1,1,s1,3);
     f0a:	40 91 23 02 	lds	r20, 0x0223
     f0e:	50 91 24 02 	lds	r21, 0x0224
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	23 e0       	ldi	r18, 0x03	; 3
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,5,s3,3);
     f1e:	40 91 21 02 	lds	r20, 0x0221
     f22:	50 91 22 02 	lds	r21, 0x0222
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	65 e0       	ldi	r22, 0x05	; 5
     f2a:	23 e0       	ldi	r18, 0x03	; 3
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,10,s5,3);
     f32:	40 91 1f 02 	lds	r20, 0x021F
     f36:	50 91 20 02 	lds	r21, 0x0220
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	6a e0       	ldi	r22, 0x0A	; 10
     f3e:	23 e0       	ldi	r18, 0x03	; 3
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(2,1,d,3);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	41 2f       	mov	r20, r17
     f4c:	50 2f       	mov	r21, r16
     f4e:	23 e0       	ldi	r18, 0x03	; 3
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				get_sharp_sensor_values();
     f56:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
     f5a:	80 91 15 02 	lds	r24, 0x0215
     f5e:	84 31       	cpi	r24, 0x14	; 20
     f60:	40 f4       	brcc	.+16     	; 0xf72 <wallFollowS5+0x1b4>
     f62:	80 91 16 02 	lds	r24, 0x0216
     f66:	85 31       	cpi	r24, 0x15	; 21
     f68:	20 f4       	brcc	.+8      	; 0xf72 <wallFollowS5+0x1b4>
     f6a:	80 91 14 02 	lds	r24, 0x0214
     f6e:	85 31       	cpi	r24, 0x15	; 21
     f70:	20 f0       	brcs	.+8      	; 0xf7a <wallFollowS5+0x1bc>
					d=500;
					lineFollower();
     f72:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lineFollower>
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
				lcd_print(2,1,d,3);
				get_sharp_sensor_values();
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
					d=500;
     f76:	e7 01       	movw	r28, r14
					lineFollower();
					break;
     f78:	10 c0       	rjmp	.+32     	; 0xf9a <wallFollowS5+0x1dc>
				}
				d--;
     f7a:	21 97       	sbiw	r28, 0x01	; 1
		}
		if(s5 > 328 && s5 < 700)
		{
			forward();
			velocity(170,140);
			while (s5 > 328  && (d>=0 && d <  400 ) )
     f7c:	80 91 1f 02 	lds	r24, 0x021F
     f80:	90 91 20 02 	lds	r25, 0x0220
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	89 34       	cpi	r24, 0x49	; 73
     f88:	92 07       	cpc	r25, r18
     f8a:	38 f0       	brcs	.+14     	; 0xf9a <wallFollowS5+0x1dc>
     f8c:	1c 2f       	mov	r17, r28
     f8e:	0d 2f       	mov	r16, r29
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	c0 39       	cpi	r28, 0x90	; 144
     f94:	d8 07       	cpc	r29, r24
     f96:	08 f4       	brcc	.+2      	; 0xf9a <wallFollowS5+0x1dc>
     f98:	b8 cf       	rjmp	.-144    	; 0xf0a <wallFollowS5+0x14c>
					break;
				}
				d--;
			}
		}
		if( s5 >= 700)
     f9a:	80 91 1f 02 	lds	r24, 0x021F
     f9e:	90 91 20 02 	lds	r25, 0x0220
     fa2:	a2 e0       	ldi	r26, 0x02	; 2
     fa4:	8c 3b       	cpi	r24, 0xBC	; 188
     fa6:	9a 07       	cpc	r25, r26
     fa8:	08 f0       	brcs	.+2      	; 0xfac <wallFollowS5+0x1ee>
     faa:	53 c0       	rjmp	.+166    	; 0x1052 <wallFollowS5+0x294>
		break;
		if(s5 == 328)
     fac:	b1 e0       	ldi	r27, 0x01	; 1
     fae:	88 34       	cpi	r24, 0x48	; 72
     fb0:	9b 07       	cpc	r25, r27
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <wallFollowS5+0x204>
		{
			forward();
     fb4:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(175,165);
     fb8:	8f ea       	ldi	r24, 0xAF	; 175
     fba:	65 ea       	ldi	r22, 0xA5	; 165
     fbc:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			d--;
     fc0:	21 97       	sbiw	r28, 0x01	; 1
		}
		lcd_print(1,1,s1,3);
     fc2:	40 91 23 02 	lds	r20, 0x0223
     fc6:	50 91 24 02 	lds	r21, 0x0224
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	23 e0       	ldi	r18, 0x03	; 3
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(1,5,s3,3);
     fd6:	40 91 21 02 	lds	r20, 0x0221
     fda:	50 91 22 02 	lds	r21, 0x0222
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	65 e0       	ldi	r22, 0x05	; 5
     fe2:	23 e0       	ldi	r18, 0x03	; 3
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(1,10,s5,3);
     fea:	40 91 1f 02 	lds	r20, 0x021F
     fee:	50 91 20 02 	lds	r21, 0x0220
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	6a e0       	ldi	r22, 0x0A	; 10
     ff6:	23 e0       	ldi	r18, 0x03	; 3
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(2,1,d,3);
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	ae 01       	movw	r20, r28
    1004:	23 e0       	ldi	r18, 0x03	; 3
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		
		if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
    100c:	80 91 15 02 	lds	r24, 0x0215
    1010:	84 31       	cpi	r24, 0x14	; 20
    1012:	40 f4       	brcc	.+16     	; 0x1024 <wallFollowS5+0x266>
    1014:	80 91 16 02 	lds	r24, 0x0216
    1018:	85 31       	cpi	r24, 0x15	; 21
    101a:	20 f4       	brcc	.+8      	; 0x1024 <wallFollowS5+0x266>
    101c:	80 91 14 02 	lds	r24, 0x0214
    1020:	85 31       	cpi	r24, 0x15	; 21
    1022:	18 f0       	brcs	.+6      	; 0x102a <wallFollowS5+0x26c>
			d=500;
			lineFollower();
    1024:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lineFollower>
			break;
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <wallFollowS5+0x294>
		}
		get_white_sensor_values();
    102a:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
		get_sharp_sensor_values();
    102e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>


void wallFollowS5(int d){
	get_sharp_sensor_values();
	get_white_sensor_values();
	while(s5 < lim2 && (d>=0 && d <  400 ))
    1032:	80 91 1f 02 	lds	r24, 0x021F
    1036:	90 91 20 02 	lds	r25, 0x0220
    103a:	20 91 0f 02 	lds	r18, 0x020F
    103e:	30 91 10 02 	lds	r19, 0x0210
    1042:	82 17       	cp	r24, r18
    1044:	93 07       	cpc	r25, r19
    1046:	28 f4       	brcc	.+10     	; 0x1052 <wallFollowS5+0x294>
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	c0 39       	cpi	r28, 0x90	; 144
    104c:	d2 07       	cpc	r29, r18
    104e:	08 f4       	brcc	.+2      	; 0x1052 <wallFollowS5+0x294>
    1050:	d8 ce       	rjmp	.-592    	; 0xe02 <wallFollowS5+0x44>
			break;
		}
		get_white_sensor_values();
		get_sharp_sensor_values();
	}
	buzzer_on();
    1052:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	a8 e0       	ldi	r26, 0x08	; 8
    105c:	81 50       	subi	r24, 0x01	; 1
    105e:	90 40       	sbci	r25, 0x00	; 0
    1060:	a0 40       	sbci	r26, 0x00	; 0
    1062:	e1 f7       	brne	.-8      	; 0x105c <wallFollowS5+0x29e>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <wallFollowS5+0x2a8>
    1066:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
    1068:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	a8 e0       	ldi	r26, 0x08	; 8
    1072:	81 50       	subi	r24, 0x01	; 1
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	a0 40       	sbci	r26, 0x00	; 0
    1078:	e1 f7       	brne	.-8      	; 0x1072 <wallFollowS5+0x2b4>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <wallFollowS5+0x2be>
    107c:	00 00       	nop
	_delay_ms(200);
	stop();
    107e:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
	
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	08 95       	ret

00001090 <wallFollowS1>:
void wallFollowS1(signed int d){
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
	get_sharp_sensor_values();
    109e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
	get_white_sensor_values();
    10a2:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
	while(s1 < lim2 && (d>=0 && d < 400 ))
    10a6:	80 91 23 02 	lds	r24, 0x0223
    10aa:	90 91 24 02 	lds	r25, 0x0224
    10ae:	20 91 0f 02 	lds	r18, 0x020F
    10b2:	30 91 10 02 	lds	r19, 0x0210
    10b6:	82 17       	cp	r24, r18
    10b8:	93 07       	cpc	r25, r19
    10ba:	08 f0       	brcs	.+2      	; 0x10be <wallFollowS1+0x2e>
    10bc:	2f c1       	rjmp	.+606    	; 0x131c <wallFollowS1+0x28c>
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	c0 39       	cpi	r28, 0x90	; 144
    10c2:	d2 07       	cpc	r29, r18
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <wallFollowS1+0x38>
    10c6:	2a c1       	rjmp	.+596    	; 0x131c <wallFollowS1+0x28c>
				lcd_print(1,1,s1,3);
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
				lcd_print(2,1,d,3);
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
					d=500;
    10c8:	0f 2e       	mov	r0, r31
    10ca:	f4 ef       	ldi	r31, 0xF4	; 244
    10cc:	ef 2e       	mov	r14, r31
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	ff 2e       	mov	r15, r31
    10d2:	f0 2d       	mov	r31, r0
void wallFollowS1(signed int d){
	get_sharp_sensor_values();
	get_white_sensor_values();
	while(s1 < lim2 && (d>=0 && d < 400 ))
	{
		if (s1 < 328)
    10d4:	a1 e0       	ldi	r26, 0x01	; 1
    10d6:	88 34       	cpi	r24, 0x48	; 72
    10d8:	9a 07       	cpc	r25, r26
    10da:	08 f0       	brcs	.+2      	; 0x10de <wallFollowS1+0x4e>
    10dc:	5e c0       	rjmp	.+188    	; 0x119a <wallFollowS1+0x10a>
		{
			forward();
    10de:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(170,140);
    10e2:	8a ea       	ldi	r24, 0xAA	; 170
    10e4:	6c e8       	ldi	r22, 0x8C	; 140
    10e6:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while (s1<328 && (d>=0 && d <  400 ) )
    10ea:	80 91 23 02 	lds	r24, 0x0223
    10ee:	90 91 24 02 	lds	r25, 0x0224
    10f2:	b1 e0       	ldi	r27, 0x01	; 1
    10f4:	88 34       	cpi	r24, 0x48	; 72
    10f6:	9b 07       	cpc	r25, r27
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <wallFollowS1+0x6c>
    10fa:	4f c0       	rjmp	.+158    	; 0x119a <wallFollowS1+0x10a>
    10fc:	1c 2f       	mov	r17, r28
    10fe:	0d 2f       	mov	r16, r29
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	c0 39       	cpi	r28, 0x90	; 144
    1104:	d2 07       	cpc	r29, r18
    1106:	08 f0       	brcs	.+2      	; 0x110a <wallFollowS1+0x7a>
    1108:	48 c0       	rjmp	.+144    	; 0x119a <wallFollowS1+0x10a>
			{
				get_sharp_sensor_values();
    110a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				lcd_print(1,1,s1,3);
    110e:	40 91 23 02 	lds	r20, 0x0223
    1112:	50 91 24 02 	lds	r21, 0x0224
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	23 e0       	ldi	r18, 0x03	; 3
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,5,s3,3);
    1122:	40 91 21 02 	lds	r20, 0x0221
    1126:	50 91 22 02 	lds	r21, 0x0222
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	65 e0       	ldi	r22, 0x05	; 5
    112e:	23 e0       	ldi	r18, 0x03	; 3
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,10,s5,3);
    1136:	40 91 1f 02 	lds	r20, 0x021F
    113a:	50 91 20 02 	lds	r21, 0x0220
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	6a e0       	ldi	r22, 0x0A	; 10
    1142:	23 e0       	ldi	r18, 0x03	; 3
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(2,1,d,3);
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	41 2f       	mov	r20, r17
    1150:	50 2f       	mov	r21, r16
    1152:	23 e0       	ldi	r18, 0x03	; 3
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
    115a:	80 91 15 02 	lds	r24, 0x0215
    115e:	84 31       	cpi	r24, 0x14	; 20
    1160:	40 f4       	brcc	.+16     	; 0x1172 <wallFollowS1+0xe2>
    1162:	80 91 16 02 	lds	r24, 0x0216
    1166:	85 31       	cpi	r24, 0x15	; 21
    1168:	20 f4       	brcc	.+8      	; 0x1172 <wallFollowS1+0xe2>
    116a:	80 91 14 02 	lds	r24, 0x0214
    116e:	85 31       	cpi	r24, 0x15	; 21
    1170:	20 f0       	brcs	.+8      	; 0x117a <wallFollowS1+0xea>
					d=500;
					lineFollower();
    1172:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lineFollower>
				lcd_print(1,1,s1,3);
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
				lcd_print(2,1,d,3);
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
					d=500;
    1176:	e7 01       	movw	r28, r14
					lineFollower();
					break;
    1178:	10 c0       	rjmp	.+32     	; 0x119a <wallFollowS1+0x10a>
				}
				d--;
    117a:	21 97       	sbiw	r28, 0x01	; 1
	{
		if (s1 < 328)
		{
			forward();
			velocity(170,140);
			while (s1<328 && (d>=0 && d <  400 ) )
    117c:	80 91 23 02 	lds	r24, 0x0223
    1180:	90 91 24 02 	lds	r25, 0x0224
    1184:	a1 e0       	ldi	r26, 0x01	; 1
    1186:	88 34       	cpi	r24, 0x48	; 72
    1188:	9a 07       	cpc	r25, r26
    118a:	38 f4       	brcc	.+14     	; 0x119a <wallFollowS1+0x10a>
    118c:	1c 2f       	mov	r17, r28
    118e:	0d 2f       	mov	r16, r29
    1190:	b1 e0       	ldi	r27, 0x01	; 1
    1192:	c0 39       	cpi	r28, 0x90	; 144
    1194:	db 07       	cpc	r29, r27
    1196:	08 f4       	brcc	.+2      	; 0x119a <wallFollowS1+0x10a>
    1198:	b8 cf       	rjmp	.-144    	; 0x110a <wallFollowS1+0x7a>
					break;
				}
				d--;
			}
		}
		if(s1 > 328 && s1 < 700)
    119a:	80 91 23 02 	lds	r24, 0x0223
    119e:	90 91 24 02 	lds	r25, 0x0224
    11a2:	89 54       	subi	r24, 0x49	; 73
    11a4:	91 40       	sbci	r25, 0x01	; 1
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	83 37       	cpi	r24, 0x73	; 115
    11aa:	92 07       	cpc	r25, r18
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <wallFollowS1+0x120>
    11ae:	5a c0       	rjmp	.+180    	; 0x1264 <wallFollowS1+0x1d4>
		{
			forward();
    11b0:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			
			velocity(150,165);
    11b4:	86 e9       	ldi	r24, 0x96	; 150
    11b6:	65 ea       	ldi	r22, 0xA5	; 165
    11b8:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while (s1 > 328  && (d>=0 && d <  400 ) )
    11bc:	40 91 23 02 	lds	r20, 0x0223
    11c0:	50 91 24 02 	lds	r21, 0x0224
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	49 34       	cpi	r20, 0x49	; 73
    11c8:	58 07       	cpc	r21, r24
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <wallFollowS1+0x13e>
    11cc:	4b c0       	rjmp	.+150    	; 0x1264 <wallFollowS1+0x1d4>
    11ce:	1c 2f       	mov	r17, r28
    11d0:	0d 2f       	mov	r16, r29
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	c0 39       	cpi	r28, 0x90	; 144
    11d6:	d9 07       	cpc	r29, r25
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <wallFollowS1+0x14c>
    11da:	44 c0       	rjmp	.+136    	; 0x1264 <wallFollowS1+0x1d4>
			{
				lcd_print(1,1,s1,3);
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	23 e0       	ldi	r18, 0x03	; 3
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,5,s3,3);
    11e8:	40 91 21 02 	lds	r20, 0x0221
    11ec:	50 91 22 02 	lds	r21, 0x0222
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	65 e0       	ldi	r22, 0x05	; 5
    11f4:	23 e0       	ldi	r18, 0x03	; 3
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,10,s5,3);
    11fc:	40 91 1f 02 	lds	r20, 0x021F
    1200:	50 91 20 02 	lds	r21, 0x0220
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	6a e0       	ldi	r22, 0x0A	; 10
    1208:	23 e0       	ldi	r18, 0x03	; 3
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(2,1,d,3);
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	41 2f       	mov	r20, r17
    1216:	50 2f       	mov	r21, r16
    1218:	23 e0       	ldi	r18, 0x03	; 3
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				get_sharp_sensor_values();
    1220:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
    1224:	80 91 15 02 	lds	r24, 0x0215
    1228:	84 31       	cpi	r24, 0x14	; 20
    122a:	40 f4       	brcc	.+16     	; 0x123c <wallFollowS1+0x1ac>
    122c:	80 91 16 02 	lds	r24, 0x0216
    1230:	85 31       	cpi	r24, 0x15	; 21
    1232:	20 f4       	brcc	.+8      	; 0x123c <wallFollowS1+0x1ac>
    1234:	80 91 14 02 	lds	r24, 0x0214
    1238:	85 31       	cpi	r24, 0x15	; 21
    123a:	20 f0       	brcs	.+8      	; 0x1244 <wallFollowS1+0x1b4>
					d=500;
					lineFollower();
    123c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lineFollower>
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
				lcd_print(2,1,d,3);
				get_sharp_sensor_values();
				if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
					d=500;
    1240:	e7 01       	movw	r28, r14
					lineFollower();
					break;
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <wallFollowS1+0x1d4>
				}
				d--;
    1244:	21 97       	sbiw	r28, 0x01	; 1
		if(s1 > 328 && s1 < 700)
		{
			forward();
			
			velocity(150,165);
			while (s1 > 328  && (d>=0 && d <  400 ) )
    1246:	40 91 23 02 	lds	r20, 0x0223
    124a:	50 91 24 02 	lds	r21, 0x0224
    124e:	a1 e0       	ldi	r26, 0x01	; 1
    1250:	49 34       	cpi	r20, 0x49	; 73
    1252:	5a 07       	cpc	r21, r26
    1254:	38 f0       	brcs	.+14     	; 0x1264 <wallFollowS1+0x1d4>
    1256:	1c 2f       	mov	r17, r28
    1258:	0d 2f       	mov	r16, r29
    125a:	b1 e0       	ldi	r27, 0x01	; 1
    125c:	c0 39       	cpi	r28, 0x90	; 144
    125e:	db 07       	cpc	r29, r27
    1260:	08 f4       	brcc	.+2      	; 0x1264 <wallFollowS1+0x1d4>
    1262:	bc cf       	rjmp	.-136    	; 0x11dc <wallFollowS1+0x14c>
					break;
				}
				d--;
			}
		}
		if( s1 >= 700)
    1264:	80 91 23 02 	lds	r24, 0x0223
    1268:	90 91 24 02 	lds	r25, 0x0224
    126c:	22 e0       	ldi	r18, 0x02	; 2
    126e:	8c 3b       	cpi	r24, 0xBC	; 188
    1270:	92 07       	cpc	r25, r18
    1272:	08 f0       	brcs	.+2      	; 0x1276 <wallFollowS1+0x1e6>
    1274:	53 c0       	rjmp	.+166    	; 0x131c <wallFollowS1+0x28c>
		break;
		if(s1 == 328)
    1276:	a1 e0       	ldi	r26, 0x01	; 1
    1278:	88 34       	cpi	r24, 0x48	; 72
    127a:	9a 07       	cpc	r25, r26
    127c:	39 f4       	brne	.+14     	; 0x128c <wallFollowS1+0x1fc>
		{
			forward();
    127e:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(175,165);
    1282:	8f ea       	ldi	r24, 0xAF	; 175
    1284:	65 ea       	ldi	r22, 0xA5	; 165
    1286:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			d--;
    128a:	21 97       	sbiw	r28, 0x01	; 1
		}
		lcd_print(1,1,s1,3);
    128c:	40 91 23 02 	lds	r20, 0x0223
    1290:	50 91 24 02 	lds	r21, 0x0224
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	23 e0       	ldi	r18, 0x03	; 3
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(1,5,s3,3);
    12a0:	40 91 21 02 	lds	r20, 0x0221
    12a4:	50 91 22 02 	lds	r21, 0x0222
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	65 e0       	ldi	r22, 0x05	; 5
    12ac:	23 e0       	ldi	r18, 0x03	; 3
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(1,10,s5,3);
    12b4:	40 91 1f 02 	lds	r20, 0x021F
    12b8:	50 91 20 02 	lds	r21, 0x0220
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	6a e0       	ldi	r22, 0x0A	; 10
    12c0:	23 e0       	ldi	r18, 0x03	; 3
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(2,1,d,3);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	ae 01       	movw	r20, r28
    12ce:	23 e0       	ldi	r18, 0x03	; 3
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		
		if(Center_white_line >= 20 || Left_white_line > 20 || Right_white_line > 20){
    12d6:	80 91 15 02 	lds	r24, 0x0215
    12da:	84 31       	cpi	r24, 0x14	; 20
    12dc:	40 f4       	brcc	.+16     	; 0x12ee <wallFollowS1+0x25e>
    12de:	80 91 16 02 	lds	r24, 0x0216
    12e2:	85 31       	cpi	r24, 0x15	; 21
    12e4:	20 f4       	brcc	.+8      	; 0x12ee <wallFollowS1+0x25e>
    12e6:	80 91 14 02 	lds	r24, 0x0214
    12ea:	85 31       	cpi	r24, 0x15	; 21
    12ec:	18 f0       	brcs	.+6      	; 0x12f4 <wallFollowS1+0x264>
			d=500;
			lineFollower();
    12ee:	0e 94 1e 05 	call	0xa3c	; 0xa3c <lineFollower>
			break;
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <wallFollowS1+0x28c>
		}
		get_white_sensor_values();
    12f4:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
		get_sharp_sensor_values();
    12f8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
	
}
void wallFollowS1(signed int d){
	get_sharp_sensor_values();
	get_white_sensor_values();
	while(s1 < lim2 && (d>=0 && d < 400 ))
    12fc:	80 91 23 02 	lds	r24, 0x0223
    1300:	90 91 24 02 	lds	r25, 0x0224
    1304:	20 91 0f 02 	lds	r18, 0x020F
    1308:	30 91 10 02 	lds	r19, 0x0210
    130c:	82 17       	cp	r24, r18
    130e:	93 07       	cpc	r25, r19
    1310:	28 f4       	brcc	.+10     	; 0x131c <wallFollowS1+0x28c>
    1312:	b1 e0       	ldi	r27, 0x01	; 1
    1314:	c0 39       	cpi	r28, 0x90	; 144
    1316:	db 07       	cpc	r29, r27
    1318:	08 f4       	brcc	.+2      	; 0x131c <wallFollowS1+0x28c>
    131a:	dc ce       	rjmp	.-584    	; 0x10d4 <wallFollowS1+0x44>
			break;
		}
		get_white_sensor_values();
		get_sharp_sensor_values();
	}
	buzzer_on();
    131c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	a8 e0       	ldi	r26, 0x08	; 8
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	90 40       	sbci	r25, 0x00	; 0
    132a:	a0 40       	sbci	r26, 0x00	; 0
    132c:	e1 f7       	brne	.-8      	; 0x1326 <wallFollowS1+0x296>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <wallFollowS1+0x2a0>
    1330:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
    1332:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	9f ef       	ldi	r25, 0xFF	; 255
    133a:	a8 e0       	ldi	r26, 0x08	; 8
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	90 40       	sbci	r25, 0x00	; 0
    1340:	a0 40       	sbci	r26, 0x00	; 0
    1342:	e1 f7       	brne	.-8      	; 0x133c <wallFollowS1+0x2ac>
    1344:	00 c0       	rjmp	.+0      	; 0x1346 <wallFollowS1+0x2b6>
    1346:	00 00       	nop
	_delay_ms(200);
	stop();																																		
    1348:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
	
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	08 95       	ret

0000135a <garbageCollection>:

void garbageCollection(){
	right_degrees(100);
    135a:	84 e6       	ldi	r24, 0x64	; 100
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	line_follow();
    1362:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	forward();
    1366:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	a8 e0       	ldi	r26, 0x08	; 8
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	a0 40       	sbci	r26, 0x00	; 0
    1376:	e1 f7       	brne	.-8      	; 0x1370 <garbageCollection+0x16>
    1378:	00 c0       	rjmp	.+0      	; 0x137a <garbageCollection+0x20>
    137a:	00 00       	nop
	_delay_ms(200);
	
	line_follow();
    137c:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	back();
    1380:	0e 94 b1 03 	call	0x762	; 0x762 <back>
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	9f ef       	ldi	r25, 0xFF	; 255
    1388:	a1 e1       	ldi	r26, 0x11	; 17
    138a:	81 50       	subi	r24, 0x01	; 1
    138c:	90 40       	sbci	r25, 0x00	; 0
    138e:	a0 40       	sbci	r26, 0x00	; 0
    1390:	e1 f7       	brne	.-8      	; 0x138a <garbageCollection+0x30>
    1392:	00 c0       	rjmp	.+0      	; 0x1394 <garbageCollection+0x3a>
    1394:	00 00       	nop
	_delay_ms(400);
	stop();
    1396:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	9f e7       	ldi	r25, 0x7F	; 127
    139e:	a4 e0       	ldi	r26, 0x04	; 4
    13a0:	81 50       	subi	r24, 0x01	; 1
    13a2:	90 40       	sbci	r25, 0x00	; 0
    13a4:	a0 40       	sbci	r26, 0x00	; 0
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <garbageCollection+0x46>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <garbageCollection+0x50>
    13aa:	00 00       	nop
	_delay_ms(100);
	place();
    13ac:	0e 94 c8 06 	call	0xd90	; 0xd90 <place>
	moveArmUp();
    13b0:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
	

}
    13b4:	08 95       	ret

000013b6 <HomeToSS>:
void HomeToSS()
{
	forward();
    13b6:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
	velocity(175,175);
    13ba:	8f ea       	ldi	r24, 0xAF	; 175
    13bc:	6f ea       	ldi	r22, 0xAF	; 175
    13be:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	a9 e5       	ldi	r26, 0x59	; 89
    13c8:	81 50       	subi	r24, 0x01	; 1
    13ca:	90 40       	sbci	r25, 0x00	; 0
    13cc:	a0 40       	sbci	r26, 0x00	; 0
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <HomeToSS+0x12>
    13d0:	00 c0       	rjmp	.+0      	; 0x13d2 <HomeToSS+0x1c>
    13d2:	00 00       	nop
	_delay_ms(2000);
	stop();
    13d4:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
	wallFollowS5(45);
    13d8:	8d e2       	ldi	r24, 0x2D	; 45
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 df 06 	call	0xdbe	; 0xdbe <wallFollowS5>
	velocity(230,230);
    13e0:	86 ee       	ldi	r24, 0xE6	; 230
    13e2:	66 ee       	ldi	r22, 0xE6	; 230
    13e4:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
	line_follow();
    13e8:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
		
	//---------Center of SS----------//
	line_follow();
    13ec:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    13f0:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	9f ef       	ldi	r25, 0xFF	; 255
    13f8:	a1 e1       	ldi	r26, 0x11	; 17
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	90 40       	sbci	r25, 0x00	; 0
    13fe:	a0 40       	sbci	r26, 0x00	; 0
    1400:	e1 f7       	brne	.-8      	; 0x13fa <HomeToSS+0x44>
    1402:	00 c0       	rjmp	.+0      	; 0x1404 <HomeToSS+0x4e>
    1404:	00 00       	nop
	_delay_ms(400);
	
}
    1406:	08 95       	ret

00001408 <wallDetection>:

void wallDetection(){
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
	while(1)
	{

		get_white_sensor_values();
		get_sharp_sensor_values();
		unsigned char flag=0;
    140c:	d0 e0       	ldi	r29, 0x00	; 0
void wallDetection(){
	int var=20,lim1=50,lim2=500;
	while(1)
	{

		get_white_sensor_values();
    140e:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
		get_sharp_sensor_values();
    1412:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
		unsigned char flag=0;

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	43 e0       	ldi	r20, 0x03	; 3
    141c:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	65 e0       	ldi	r22, 0x05	; 5
    1424:	42 e0       	ldi	r20, 0x02	; 2
    1426:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	69 e0       	ldi	r22, 0x09	; 9
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 a9 02 	call	0x552	; 0x552 <print_sensor>
		
		if ((s1 < lim2 && s1 > lim1) && (s5 < lim2 && s1 > lim1)){
    1434:	80 91 23 02 	lds	r24, 0x0223
    1438:	90 91 24 02 	lds	r25, 0x0224
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	84 3f       	cpi	r24, 0xF4	; 244
    1440:	92 07       	cpc	r25, r18
    1442:	d8 f4       	brcc	.+54     	; 0x147a <wallDetection+0x72>
    1444:	20 91 1f 02 	lds	r18, 0x021F
    1448:	30 91 20 02 	lds	r19, 0x0220
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	24 3f       	cpi	r18, 0xF4	; 244
    1450:	34 07       	cpc	r19, r20
    1452:	98 f4       	brcc	.+38     	; 0x147a <wallDetection+0x72>
    1454:	83 33       	cpi	r24, 0x33	; 51
    1456:	91 05       	cpc	r25, r1
    1458:	80 f0       	brcs	.+32     	; 0x147a <wallDetection+0x72>
			buzzer();
    145a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <buzzer>
			lcd_wr_command(0x01);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
			lcd_print(2,1,1,1);
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
			stop();
    1474:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			break;
    1478:	52 c1       	rjmp	.+676    	; 0x171e <wallDetection+0x316>
			
		}
		if(Center_white_line>var)
    147a:	80 91 15 02 	lds	r24, 0x0215
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	85 31       	cpi	r24, 0x15	; 21
    1482:	91 05       	cpc	r25, r1
    1484:	44 f0       	brlt	.+16     	; 0x1496 <wallDetection+0x8e>
		{
			flag=1;
			forward();
    1486:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(220,220);
    148a:	8c ed       	ldi	r24, 0xDC	; 220
    148c:	6c ed       	ldi	r22, 0xDC	; 220
    148e:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			break;
			
		}
		if(Center_white_line>var)
		{
			flag=1;
    1492:	c1 e0       	ldi	r28, 0x01	; 1
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <wallDetection+0x90>
	while(1)
	{

		get_white_sensor_values();
		get_sharp_sensor_values();
		unsigned char flag=0;
    1496:	cd 2f       	mov	r28, r29
			forward();
			velocity(220,220);
			//velocity(170,170);
		}

		if (Left_white_line>var && Center_white_line>var && Right_white_line>var)
    1498:	80 91 16 02 	lds	r24, 0x0216
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	85 31       	cpi	r24, 0x15	; 21
    14a0:	91 05       	cpc	r25, r1
    14a2:	0c f4       	brge	.+2      	; 0x14a6 <wallDetection+0x9e>
    14a4:	77 c0       	rjmp	.+238    	; 0x1594 <wallDetection+0x18c>
    14a6:	80 91 15 02 	lds	r24, 0x0215
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	85 31       	cpi	r24, 0x15	; 21
    14ae:	91 05       	cpc	r25, r1
    14b0:	3c f1       	brlt	.+78     	; 0x1500 <wallDetection+0xf8>
    14b2:	80 91 14 02 	lds	r24, 0x0214
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	85 31       	cpi	r24, 0x15	; 21
    14ba:	91 05       	cpc	r25, r1
    14bc:	0c f1       	brlt	.+66     	; 0x1500 <wallDetection+0xf8>
		{
			lcd_cursor(2,1);
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
			lcd_string("All");
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
			stop();
    14ce:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			buzzer_on();
    14d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	9f e7       	ldi	r25, 0x7F	; 127
    14da:	a6 e1       	ldi	r26, 0x16	; 22
    14dc:	81 50       	subi	r24, 0x01	; 1
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	a0 40       	sbci	r26, 0x00	; 0
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <wallDetection+0xd4>
    14e4:	00 c0       	rjmp	.+0      	; 0x14e6 <wallDetection+0xde>
    14e6:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    14e8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	9f e7       	ldi	r25, 0x7F	; 127
    14f0:	a6 e1       	ldi	r26, 0x16	; 22
    14f2:	81 50       	subi	r24, 0x01	; 1
    14f4:	90 40       	sbci	r25, 0x00	; 0
    14f6:	a0 40       	sbci	r26, 0x00	; 0
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <wallDetection+0xea>
    14fa:	00 c0       	rjmp	.+0      	; 0x14fc <wallDetection+0xf4>
    14fc:	00 00       	nop
    14fe:	0f c1       	rjmp	.+542    	; 0x171e <wallDetection+0x316>
			_delay_ms(500);
			break;
		}
		
		if((Left_white_line>var) && (flag==0))
    1500:	cc 23       	and	r28, r28
    1502:	09 f0       	breq	.+2      	; 0x1506 <wallDetection+0xfe>
    1504:	47 c0       	rjmp	.+142    	; 0x1594 <wallDetection+0x18c>
		{
			//flag=1;
			left();
    1506:	0e 94 b5 03 	call	0x76a	; 0x76a <left>
			velocity(130,130);
    150a:	82 e8       	ldi	r24, 0x82	; 130
    150c:	62 e8       	ldi	r22, 0x82	; 130
    150e:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while(1)
			{
				get_white_sensor_values();
    1512:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
				get_sharp_sensor_values();
    1516:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				if ((s1 < lim2 && s1 > lim1) && (s5 < lim2 && s5 > lim1))
    151a:	80 91 23 02 	lds	r24, 0x0223
    151e:	90 91 24 02 	lds	r25, 0x0224
    1522:	a1 e0       	ldi	r26, 0x01	; 1
    1524:	84 3f       	cpi	r24, 0xF4	; 244
    1526:	9a 07       	cpc	r25, r26
    1528:	f0 f4       	brcc	.+60     	; 0x1566 <wallDetection+0x15e>
    152a:	83 33       	cpi	r24, 0x33	; 51
    152c:	91 05       	cpc	r25, r1
    152e:	d8 f0       	brcs	.+54     	; 0x1566 <wallDetection+0x15e>
    1530:	80 91 1f 02 	lds	r24, 0x021F
    1534:	90 91 20 02 	lds	r25, 0x0220
    1538:	b1 e0       	ldi	r27, 0x01	; 1
    153a:	84 3f       	cpi	r24, 0xF4	; 244
    153c:	9b 07       	cpc	r25, r27
    153e:	98 f4       	brcc	.+38     	; 0x1566 <wallDetection+0x15e>
    1540:	83 33       	cpi	r24, 0x33	; 51
    1542:	91 05       	cpc	r25, r1
    1544:	80 f0       	brcs	.+32     	; 0x1566 <wallDetection+0x15e>
				{
					lcd_wr_command(0x01);
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
					lcd_print(2,1,2,1);
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	42 e0       	ldi	r20, 0x02	; 2
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
					buzzer();
    155c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <buzzer>
					stop();
    1560:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
					break;
    1564:	17 c0       	rjmp	.+46     	; 0x1594 <wallDetection+0x18c>
				}
				if(Left_white_line <var && Center_white_line>var && Right_white_line<var)
    1566:	80 91 16 02 	lds	r24, 0x0216
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	84 31       	cpi	r24, 0x14	; 20
    156e:	91 05       	cpc	r25, r1
    1570:	84 f6       	brge	.-96     	; 0x1512 <wallDetection+0x10a>
    1572:	80 91 15 02 	lds	r24, 0x0215
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	85 31       	cpi	r24, 0x15	; 21
    157a:	91 05       	cpc	r25, r1
    157c:	54 f2       	brlt	.-108    	; 0x1512 <wallDetection+0x10a>
    157e:	80 91 14 02 	lds	r24, 0x0214
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	84 31       	cpi	r24, 0x14	; 20
    1586:	91 05       	cpc	r25, r1
    1588:	24 f6       	brge	.-120    	; 0x1512 <wallDetection+0x10a>
				{
					lcd_wr_command(0x01);
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_wr_command>
					stop();
    1590:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
				}
			}
			//velocity(175,175);
		}

		if((Right_white_line>var) && (flag==0))
    1594:	80 91 14 02 	lds	r24, 0x0214
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	85 31       	cpi	r24, 0x15	; 21
    159c:	91 05       	cpc	r25, r1
    159e:	0c f4       	brge	.+2      	; 0x15a2 <wallDetection+0x19a>
    15a0:	44 c0       	rjmp	.+136    	; 0x162a <wallDetection+0x222>
    15a2:	cc 23       	and	r28, r28
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <wallDetection+0x1a0>
    15a6:	41 c0       	rjmp	.+130    	; 0x162a <wallDetection+0x222>
		{
			//flag=1;
			right();
    15a8:	0e 94 b9 03 	call	0x772	; 0x772 <right>
			velocity(130,130);
    15ac:	82 e8       	ldi	r24, 0x82	; 130
    15ae:	62 e8       	ldi	r22, 0x82	; 130
    15b0:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while(1)
			{
				get_white_sensor_values();
    15b4:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
				get_sharp_sensor_values();
    15b8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				if ((s1 < lim2 && s1 > lim1) && (s5 < lim2 && s5 > lim1))
    15bc:	80 91 23 02 	lds	r24, 0x0223
    15c0:	90 91 24 02 	lds	r25, 0x0224
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	84 3f       	cpi	r24, 0xF4	; 244
    15c8:	92 07       	cpc	r25, r18
    15ca:	d8 f4       	brcc	.+54     	; 0x1602 <wallDetection+0x1fa>
    15cc:	83 33       	cpi	r24, 0x33	; 51
    15ce:	91 05       	cpc	r25, r1
    15d0:	c0 f0       	brcs	.+48     	; 0x1602 <wallDetection+0x1fa>
    15d2:	80 91 1f 02 	lds	r24, 0x021F
    15d6:	90 91 20 02 	lds	r25, 0x0220
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	84 3f       	cpi	r24, 0xF4	; 244
    15de:	94 07       	cpc	r25, r20
    15e0:	80 f4       	brcc	.+32     	; 0x1602 <wallDetection+0x1fa>
    15e2:	83 33       	cpi	r24, 0x33	; 51
    15e4:	91 05       	cpc	r25, r1
    15e6:	68 f0       	brcs	.+26     	; 0x1602 <wallDetection+0x1fa>
				{
					lcd_print(2,1,3,1);
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	43 e0       	ldi	r20, 0x03	; 3
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	21 e0       	ldi	r18, 0x01	; 1
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
					buzzer();
    15f8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <buzzer>
					stop();
    15fc:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
					break;
    1600:	14 c0       	rjmp	.+40     	; 0x162a <wallDetection+0x222>
				}
				if(Left_white_line <var && Center_white_line>var && Right_white_line<var)
    1602:	80 91 16 02 	lds	r24, 0x0216
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	84 31       	cpi	r24, 0x14	; 20
    160a:	91 05       	cpc	r25, r1
    160c:	9c f6       	brge	.-90     	; 0x15b4 <wallDetection+0x1ac>
    160e:	80 91 15 02 	lds	r24, 0x0215
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	85 31       	cpi	r24, 0x15	; 21
    1616:	91 05       	cpc	r25, r1
    1618:	6c f2       	brlt	.-102    	; 0x15b4 <wallDetection+0x1ac>
    161a:	80 91 14 02 	lds	r24, 0x0214
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	84 31       	cpi	r24, 0x14	; 20
    1622:	91 05       	cpc	r25, r1
    1624:	3c f6       	brge	.-114    	; 0x15b4 <wallDetection+0x1ac>
				{
					stop();
    1626:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
					break;
				}
			}//velocity(175,175);
		}
		if((Left_white_line>var) && (flag==1))
    162a:	80 91 16 02 	lds	r24, 0x0216
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	85 31       	cpi	r24, 0x15	; 21
    1632:	91 05       	cpc	r25, r1
    1634:	1c f1       	brlt	.+70     	; 0x167c <wallDetection+0x274>
    1636:	c1 30       	cpi	r28, 0x01	; 1
    1638:	09 f5       	brne	.+66     	; 0x167c <wallDetection+0x274>
		{
			stop();
    163a:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			lcd_cursor(2,1);
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
			lcd_string("Left");
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
			buzzer_on();
    164e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	9f e7       	ldi	r25, 0x7F	; 127
    1656:	a6 e1       	ldi	r26, 0x16	; 22
    1658:	81 50       	subi	r24, 0x01	; 1
    165a:	90 40       	sbci	r25, 0x00	; 0
    165c:	a0 40       	sbci	r26, 0x00	; 0
    165e:	e1 f7       	brne	.-8      	; 0x1658 <wallDetection+0x250>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <wallDetection+0x25a>
    1662:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    1664:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	9f e7       	ldi	r25, 0x7F	; 127
    166c:	a6 e1       	ldi	r26, 0x16	; 22
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	90 40       	sbci	r25, 0x00	; 0
    1672:	a0 40       	sbci	r26, 0x00	; 0
    1674:	e1 f7       	brne	.-8      	; 0x166e <wallDetection+0x266>
    1676:	00 c0       	rjmp	.+0      	; 0x1678 <wallDetection+0x270>
    1678:	00 00       	nop
    167a:	51 c0       	rjmp	.+162    	; 0x171e <wallDetection+0x316>
			_delay_ms(500);
			break;
		}

		if((Right_white_line>var) && (flag==1))
    167c:	80 91 14 02 	lds	r24, 0x0214
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	85 31       	cpi	r24, 0x15	; 21
    1684:	91 05       	cpc	r25, r1
    1686:	1c f1       	brlt	.+70     	; 0x16ce <wallDetection+0x2c6>
    1688:	c1 30       	cpi	r28, 0x01	; 1
    168a:	09 f5       	brne	.+66     	; 0x16ce <wallDetection+0x2c6>
		{
			stop();
    168c:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			lcd_cursor(2,1);
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_cursor>
			lcd_string("Right");
    1698:	89 e0       	ldi	r24, 0x09	; 9
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_string>
			buzzer_on();
    16a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	9f e7       	ldi	r25, 0x7F	; 127
    16a8:	a6 e1       	ldi	r26, 0x16	; 22
    16aa:	81 50       	subi	r24, 0x01	; 1
    16ac:	90 40       	sbci	r25, 0x00	; 0
    16ae:	a0 40       	sbci	r26, 0x00	; 0
    16b0:	e1 f7       	brne	.-8      	; 0x16aa <wallDetection+0x2a2>
    16b2:	00 c0       	rjmp	.+0      	; 0x16b4 <wallDetection+0x2ac>
    16b4:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    16b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	9f e7       	ldi	r25, 0x7F	; 127
    16be:	a6 e1       	ldi	r26, 0x16	; 22
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	90 40       	sbci	r25, 0x00	; 0
    16c4:	a0 40       	sbci	r26, 0x00	; 0
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <wallDetection+0x2b8>
    16c8:	00 c0       	rjmp	.+0      	; 0x16ca <wallDetection+0x2c2>
    16ca:	00 00       	nop
    16cc:	28 c0       	rjmp	.+80     	; 0x171e <wallDetection+0x316>
			_delay_ms(500);
			break;
		}
		get_sharp_sensor_values();
    16ce:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
		if ((s1 < lim2 && s1 > lim1) && (s5 < lim2 && s5 > lim1))
    16d2:	80 91 23 02 	lds	r24, 0x0223
    16d6:	90 91 24 02 	lds	r25, 0x0224
    16da:	a1 e0       	ldi	r26, 0x01	; 1
    16dc:	84 3f       	cpi	r24, 0xF4	; 244
    16de:	9a 07       	cpc	r25, r26
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <wallDetection+0x2dc>
    16e2:	95 ce       	rjmp	.-726    	; 0x140e <wallDetection+0x6>
    16e4:	83 33       	cpi	r24, 0x33	; 51
    16e6:	91 05       	cpc	r25, r1
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <wallDetection+0x2e4>
    16ea:	91 ce       	rjmp	.-734    	; 0x140e <wallDetection+0x6>
    16ec:	80 91 1f 02 	lds	r24, 0x021F
    16f0:	90 91 20 02 	lds	r25, 0x0220
    16f4:	b1 e0       	ldi	r27, 0x01	; 1
    16f6:	84 3f       	cpi	r24, 0xF4	; 244
    16f8:	9b 07       	cpc	r25, r27
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <wallDetection+0x2f6>
    16fc:	88 ce       	rjmp	.-752    	; 0x140e <wallDetection+0x6>
    16fe:	83 33       	cpi	r24, 0x33	; 51
    1700:	91 05       	cpc	r25, r1
    1702:	08 f4       	brcc	.+2      	; 0x1706 <wallDetection+0x2fe>
    1704:	84 ce       	rjmp	.-760    	; 0x140e <wallDetection+0x6>
		{
			lcd_print(2,1,4,1);
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	44 e0       	ldi	r20, 0x04	; 4
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	21 e0       	ldi	r18, 0x01	; 1
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
			buzzer();
    1716:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <buzzer>
			stop();
    171a:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
			break;
		}
	}
}
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <SSToHome>:

void SSToHome(){
	line_follow();
    1724:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	wallFollowS1(70);
    1728:	86 e4       	ldi	r24, 0x46	; 70
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 48 08 	call	0x1090	; 0x1090 <wallFollowS1>
	line_follow();
    1730:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
}
    1734:	08 95       	ret

00001736 <wallfollow_S1>:


void wallfollow_S1(){
	get_sharp_sensor_values();
    1736:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
	get_white_sensor_values();
    173a:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
	while(Center_white_line < 20 && Left_white_line < 20 && Right_white_line < 20)
    173e:	80 91 15 02 	lds	r24, 0x0215
    1742:	84 31       	cpi	r24, 0x14	; 20
    1744:	08 f0       	brcs	.+2      	; 0x1748 <wallfollow_S1+0x12>
    1746:	c8 c0       	rjmp	.+400    	; 0x18d8 <wallfollow_S1+0x1a2>
    1748:	80 91 16 02 	lds	r24, 0x0216
    174c:	84 31       	cpi	r24, 0x14	; 20
    174e:	08 f0       	brcs	.+2      	; 0x1752 <wallfollow_S1+0x1c>
    1750:	c3 c0       	rjmp	.+390    	; 0x18d8 <wallfollow_S1+0x1a2>
    1752:	80 91 14 02 	lds	r24, 0x0214
    1756:	84 31       	cpi	r24, 0x14	; 20
    1758:	08 f0       	brcs	.+2      	; 0x175c <wallfollow_S1+0x26>
    175a:	be c0       	rjmp	.+380    	; 0x18d8 <wallfollow_S1+0x1a2>
	{
		if (s1 < 328)
    175c:	80 91 23 02 	lds	r24, 0x0223
    1760:	90 91 24 02 	lds	r25, 0x0224
    1764:	21 e0       	ldi	r18, 0x01	; 1
    1766:	88 34       	cpi	r24, 0x48	; 72
    1768:	92 07       	cpc	r25, r18
    176a:	b0 f5       	brcc	.+108    	; 0x17d8 <wallfollow_S1+0xa2>
		{
			forward();
    176c:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(190,165);
    1770:	8e eb       	ldi	r24, 0xBE	; 190
    1772:	65 ea       	ldi	r22, 0xA5	; 165
    1774:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while (s1<328)
    1778:	80 91 23 02 	lds	r24, 0x0223
    177c:	90 91 24 02 	lds	r25, 0x0224
    1780:	a1 e0       	ldi	r26, 0x01	; 1
    1782:	88 34       	cpi	r24, 0x48	; 72
    1784:	9a 07       	cpc	r25, r26
    1786:	40 f5       	brcc	.+80     	; 0x17d8 <wallfollow_S1+0xa2>
			{
				get_sharp_sensor_values();
    1788:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
				lcd_print(1,1,s1,3);
    178c:	40 91 23 02 	lds	r20, 0x0223
    1790:	50 91 24 02 	lds	r21, 0x0224
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	23 e0       	ldi	r18, 0x03	; 3
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,5,s3,3);
    17a0:	40 91 21 02 	lds	r20, 0x0221
    17a4:	50 91 22 02 	lds	r21, 0x0222
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	65 e0       	ldi	r22, 0x05	; 5
    17ac:	23 e0       	ldi	r18, 0x03	; 3
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,10,s5,3);
    17b4:	40 91 1f 02 	lds	r20, 0x021F
    17b8:	50 91 20 02 	lds	r21, 0x0220
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	6a e0       	ldi	r22, 0x0A	; 10
    17c0:	23 e0       	ldi	r18, 0x03	; 3
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
	{
		if (s1 < 328)
		{
			forward();
			velocity(190,165);
			while (s1<328)
    17c8:	80 91 23 02 	lds	r24, 0x0223
    17cc:	90 91 24 02 	lds	r25, 0x0224
    17d0:	b1 e0       	ldi	r27, 0x01	; 1
    17d2:	88 34       	cpi	r24, 0x48	; 72
    17d4:	9b 07       	cpc	r25, r27
    17d6:	c0 f2       	brcs	.-80     	; 0x1788 <wallfollow_S1+0x52>
				lcd_print(1,5,s3,3);
				lcd_print(1,10,s5,3);
			
			}
		}
		if(s1 > 328 && s1 < 700)
    17d8:	80 91 23 02 	lds	r24, 0x0223
    17dc:	90 91 24 02 	lds	r25, 0x0224
    17e0:	89 54       	subi	r24, 0x49	; 73
    17e2:	91 40       	sbci	r25, 0x01	; 1
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	83 37       	cpi	r24, 0x73	; 115
    17e8:	92 07       	cpc	r25, r18
    17ea:	90 f5       	brcc	.+100    	; 0x1850 <wallfollow_S1+0x11a>
		{
			forward();
    17ec:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			
			velocity(170,185);
    17f0:	8a ea       	ldi	r24, 0xAA	; 170
    17f2:	69 eb       	ldi	r22, 0xB9	; 185
    17f4:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			while (s1 > 328)
    17f8:	40 91 23 02 	lds	r20, 0x0223
    17fc:	50 91 24 02 	lds	r21, 0x0224
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	49 34       	cpi	r20, 0x49	; 73
    1804:	58 07       	cpc	r21, r24
    1806:	20 f1       	brcs	.+72     	; 0x1850 <wallfollow_S1+0x11a>
			{
				lcd_print(1,1,s1,3);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	23 e0       	ldi	r18, 0x03	; 3
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,5,s3,3);
    1814:	40 91 21 02 	lds	r20, 0x0221
    1818:	50 91 22 02 	lds	r21, 0x0222
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	65 e0       	ldi	r22, 0x05	; 5
    1820:	23 e0       	ldi	r18, 0x03	; 3
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				lcd_print(1,10,s5,3);
    1828:	40 91 1f 02 	lds	r20, 0x021F
    182c:	50 91 20 02 	lds	r21, 0x0220
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	6a e0       	ldi	r22, 0x0A	; 10
    1834:	23 e0       	ldi	r18, 0x03	; 3
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
				get_sharp_sensor_values();
    183c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>
		if(s1 > 328 && s1 < 700)
		{
			forward();
			
			velocity(170,185);
			while (s1 > 328)
    1840:	40 91 23 02 	lds	r20, 0x0223
    1844:	50 91 24 02 	lds	r21, 0x0224
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	49 34       	cpi	r20, 0x49	; 73
    184c:	59 07       	cpc	r21, r25
    184e:	e0 f6       	brcc	.-72     	; 0x1808 <wallfollow_S1+0xd2>
				lcd_print(1,10,s5,3);
				get_sharp_sensor_values();
		
			}
		}
		if( s1 >= 500){
    1850:	80 91 23 02 	lds	r24, 0x0223
    1854:	90 91 24 02 	lds	r25, 0x0224
    1858:	a1 e0       	ldi	r26, 0x01	; 1
    185a:	84 3f       	cpi	r24, 0xF4	; 244
    185c:	9a 07       	cpc	r25, r26
    185e:	18 f0       	brcs	.+6      	; 0x1866 <wallfollow_S1+0x130>
			
			buzzer();
    1860:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <buzzer>
			break;
    1864:	39 c0       	rjmp	.+114    	; 0x18d8 <wallfollow_S1+0x1a2>
		}
		
		if(s1 == 328)
    1866:	b1 e0       	ldi	r27, 0x01	; 1
    1868:	88 34       	cpi	r24, 0x48	; 72
    186a:	9b 07       	cpc	r25, r27
    186c:	31 f4       	brne	.+12     	; 0x187a <wallfollow_S1+0x144>
		{
			forward();
    186e:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
			velocity(190,190);
    1872:	8e eb       	ldi	r24, 0xBE	; 190
    1874:	6e eb       	ldi	r22, 0xBE	; 190
    1876:	0e 94 1a 04 	call	0x834	; 0x834 <velocity>
			
		}
		lcd_print(1,1,s1,3);
    187a:	40 91 23 02 	lds	r20, 0x0223
    187e:	50 91 24 02 	lds	r21, 0x0224
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	23 e0       	ldi	r18, 0x03	; 3
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(1,5,s3,3);
    188e:	40 91 21 02 	lds	r20, 0x0221
    1892:	50 91 22 02 	lds	r21, 0x0222
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	65 e0       	ldi	r22, 0x05	; 5
    189a:	23 e0       	ldi	r18, 0x03	; 3
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>
		lcd_print(1,10,s5,3);
    18a2:	40 91 1f 02 	lds	r20, 0x021F
    18a6:	50 91 20 02 	lds	r21, 0x0220
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	6a e0       	ldi	r22, 0x0A	; 10
    18ae:	23 e0       	ldi	r18, 0x03	; 3
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	0e 94 ed 01 	call	0x3da	; 0x3da <lcd_print>

		get_white_sensor_values();
    18b6:	0e 94 1f 04 	call	0x83e	; 0x83e <get_white_sensor_values>
		get_sharp_sensor_values();
    18ba:	0e 94 fd 02 	call	0x5fa	; 0x5fa <get_sharp_sensor_values>


void wallfollow_S1(){
	get_sharp_sensor_values();
	get_white_sensor_values();
	while(Center_white_line < 20 && Left_white_line < 20 && Right_white_line < 20)
    18be:	80 91 15 02 	lds	r24, 0x0215
    18c2:	84 31       	cpi	r24, 0x14	; 20
    18c4:	48 f4       	brcc	.+18     	; 0x18d8 <wallfollow_S1+0x1a2>
    18c6:	80 91 16 02 	lds	r24, 0x0216
    18ca:	84 31       	cpi	r24, 0x14	; 20
    18cc:	28 f4       	brcc	.+10     	; 0x18d8 <wallfollow_S1+0x1a2>
    18ce:	80 91 14 02 	lds	r24, 0x0214
    18d2:	84 31       	cpi	r24, 0x14	; 20
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <wallfollow_S1+0x1a2>
    18d6:	42 cf       	rjmp	.-380    	; 0x175c <wallfollow_S1+0x26>
		lcd_print(1,10,s5,3);

		get_white_sensor_values();
		get_sharp_sensor_values();
	}
	buzzer_on();
    18d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buzzer_on>
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
    18e0:	a8 e0       	ldi	r26, 0x08	; 8
    18e2:	81 50       	subi	r24, 0x01	; 1
    18e4:	90 40       	sbci	r25, 0x00	; 0
    18e6:	a0 40       	sbci	r26, 0x00	; 0
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <wallfollow_S1+0x1ac>
    18ea:	00 c0       	rjmp	.+0      	; 0x18ec <wallfollow_S1+0x1b6>
    18ec:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
    18ee:	0e 94 dd 00 	call	0x1ba	; 0x1ba <buzzer_off>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	9f ef       	ldi	r25, 0xFF	; 255
    18f6:	a8 e0       	ldi	r26, 0x08	; 8
    18f8:	81 50       	subi	r24, 0x01	; 1
    18fa:	90 40       	sbci	r25, 0x00	; 0
    18fc:	a0 40       	sbci	r26, 0x00	; 0
    18fe:	e1 f7       	brne	.-8      	; 0x18f8 <wallfollow_S1+0x1c2>
    1900:	00 c0       	rjmp	.+0      	; 0x1902 <wallfollow_S1+0x1cc>
    1902:	00 00       	nop
	_delay_ms(200);
	stop();
    1904:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
	
	
}
    1908:	08 95       	ret

0000190a <start_move_to_SS>:
void start_move_to_SS(){
	left_degrees(90);
    190a:	8a e5       	ldi	r24, 0x5A	; 90
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	HomeToSS();
    1912:	0e 94 db 09 	call	0x13b6	; 0x13b6 <HomeToSS>
}
    1916:	08 95       	ret

00001918 <move_left_and_pick_service1>:

void move_left_and_pick_service1(){
	left_degrees(100);
    1918:	84 e6       	ldi	r24, 0x64	; 100
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	line_follow();
    1920:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1924:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1928:	82 e3       	ldi	r24, 0x32	; 50
    192a:	93 e7       	ldi	r25, 0x73	; 115
    192c:	a9 e0       	ldi	r26, 0x09	; 9
    192e:	81 50       	subi	r24, 0x01	; 1
    1930:	90 40       	sbci	r25, 0x00	; 0
    1932:	a0 40       	sbci	r26, 0x00	; 0
    1934:	e1 f7       	brne	.-8      	; 0x192e <move_left_and_pick_service1+0x16>
    1936:	00 c0       	rjmp	.+0      	; 0x1938 <move_left_and_pick_service1+0x20>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <move_left_and_pick_service1+0x22>
	_delay_ms(210);
	moveArmUp();
    193a:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
	
	ungrip();
    193e:	0e 94 94 06 	call	0xd28	; 0xd28 <ungrip>
	left_degrees(105);
    1942:	89 e6       	ldi	r24, 0x69	; 105
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	pick();
    194a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <pick>

}
    194e:	08 95       	ret

00001950 <enterIntoRoomD_and_PlaceService>:

void enterIntoRoomD_and_PlaceService(){
	wallFollowS1(20);
    1950:	84 e1       	ldi	r24, 0x14	; 20
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 48 08 	call	0x1090	; 0x1090 <wallFollowS1>
	right_degrees(100);
    1958:	84 e6       	ldi	r24, 0x64	; 100
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	forward();
    1960:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9f ef       	ldi	r25, 0xFF	; 255
    1968:	ac e2       	ldi	r26, 0x2C	; 44
    196a:	81 50       	subi	r24, 0x01	; 1
    196c:	90 40       	sbci	r25, 0x00	; 0
    196e:	a0 40       	sbci	r26, 0x00	; 0
    1970:	e1 f7       	brne	.-8      	; 0x196a <enterIntoRoomD_and_PlaceService+0x1a>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <enterIntoRoomD_and_PlaceService+0x24>
    1974:	00 00       	nop
	_delay_ms(1000);
	
	line_follow();
    1976:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    197a:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	a1 e1       	ldi	r26, 0x11	; 17
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	90 40       	sbci	r25, 0x00	; 0
    1988:	a0 40       	sbci	r26, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <enterIntoRoomD_and_PlaceService+0x34>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <enterIntoRoomD_and_PlaceService+0x3e>
    198e:	00 00       	nop
	_delay_ms(400);
	
	right_degrees(95);
    1990:	8f e5       	ldi	r24, 0x5F	; 95
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	place();
    1998:	0e 94 c8 06 	call	0xd90	; 0xd90 <place>

}
    199c:	08 95       	ret

0000199e <pick_garbage_D>:

void pick_garbage_D(){
	
		moveArmUp();
    199e:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
		right_degrees(90);
    19a2:	8a e5       	ldi	r24, 0x5A	; 90
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
		back();
    19aa:	0e 94 b1 03 	call	0x762	; 0x762 <back>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	9f e7       	ldi	r25, 0x7F	; 127
    19b2:	a4 e0       	ldi	r26, 0x04	; 4
    19b4:	81 50       	subi	r24, 0x01	; 1
    19b6:	90 40       	sbci	r25, 0x00	; 0
    19b8:	a0 40       	sbci	r26, 0x00	; 0
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <pick_garbage_D+0x16>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <pick_garbage_D+0x20>
    19be:	00 00       	nop
		_delay_ms(100);
		
		right_degrees(95);
    19c0:	8f e5       	ldi	r24, 0x5F	; 95
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
		
		pick();
    19c8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <pick>
}
    19cc:	08 95       	ret

000019ce <dump_in_DS>:
void dump_in_DS(){
	left_degrees(108);
    19ce:	8c e6       	ldi	r24, 0x6C	; 108
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	wallDetection();
    19d6:	0e 94 04 0a 	call	0x1408	; 0x1408 <wallDetection>
	

	forward();
    19da:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	9f e7       	ldi	r25, 0x7F	; 127
    19e2:	a8 e2       	ldi	r26, 0x28	; 40
    19e4:	81 50       	subi	r24, 0x01	; 1
    19e6:	90 40       	sbci	r25, 0x00	; 0
    19e8:	a0 40       	sbci	r26, 0x00	; 0
    19ea:	e1 f7       	brne	.-8      	; 0x19e4 <dump_in_DS+0x16>
    19ec:	00 c0       	rjmp	.+0      	; 0x19ee <dump_in_DS+0x20>
    19ee:	00 00       	nop
	_delay_ms(900);
	stop();
    19f0:	0e 94 bd 03 	call	0x77a	; 0x77a <stop>
	
	left_degrees(90);
    19f4:	8a e5       	ldi	r24, 0x5A	; 90
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	wallFollowS5(30);
    19fc:	8e e1       	ldi	r24, 0x1E	; 30
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 df 06 	call	0xdbe	; 0xdbe <wallFollowS5>
	line_follow();
    1a04:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1a08:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f ef       	ldi	r25, 0xFF	; 255
    1a10:	a1 e1       	ldi	r26, 0x11	; 17
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	90 40       	sbci	r25, 0x00	; 0
    1a16:	a0 40       	sbci	r26, 0x00	; 0
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <dump_in_DS+0x44>
    1a1a:	00 c0       	rjmp	.+0      	; 0x1a1c <dump_in_DS+0x4e>
    1a1c:	00 00       	nop
	_delay_ms(400);
	
	
	garbageCollection();
    1a1e:	0e 94 ad 09 	call	0x135a	; 0x135a <garbageCollection>
}
    1a22:	08 95       	ret

00001a24 <rotate_and_pick_service_C>:

void rotate_and_pick_service_C(){
	right_degrees(180);
    1a24:	84 eb       	ldi	r24, 0xB4	; 180
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	line_follow();
    1a2c:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1a30:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	9f eb       	ldi	r25, 0xBF	; 191
    1a38:	af e0       	ldi	r26, 0x0F	; 15
    1a3a:	81 50       	subi	r24, 0x01	; 1
    1a3c:	90 40       	sbci	r25, 0x00	; 0
    1a3e:	a0 40       	sbci	r26, 0x00	; 0
    1a40:	e1 f7       	brne	.-8      	; 0x1a3a <rotate_and_pick_service_C+0x16>
    1a42:	00 c0       	rjmp	.+0      	; 0x1a44 <rotate_and_pick_service_C+0x20>
    1a44:	00 00       	nop
	_delay_ms(350);
	
	moveArmUp();
    1a46:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
	ungrip();
    1a4a:	0e 94 94 06 	call	0xd28	; 0xd28 <ungrip>
	
	left_degrees(95);
    1a4e:	8f e5       	ldi	r24, 0x5F	; 95
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	
	pick();
    1a56:	0e 94 a6 06 	call	0xd4c	; 0xd4c <pick>
}
    1a5a:	08 95       	ret

00001a5c <to_center_SS_from_right>:

void to_center_SS_from_right(){
	right_degrees(95);
    1a5c:	8f e5       	ldi	r24, 0x5F	; 95
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	line_follow();
    1a64:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	forward();
    1a68:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	9f ef       	ldi	r25, 0xFF	; 255
    1a70:	a1 e1       	ldi	r26, 0x11	; 17
    1a72:	81 50       	subi	r24, 0x01	; 1
    1a74:	90 40       	sbci	r25, 0x00	; 0
    1a76:	a0 40       	sbci	r26, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <to_center_SS_from_right+0x16>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <to_center_SS_from_right+0x20>
    1a7c:	00 00       	nop
	_delay_ms(400);
	left_degrees(90);
    1a7e:	8a e5       	ldi	r24, 0x5A	; 90
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
}
    1a86:	08 95       	ret

00001a88 <go_to_room_C_and_place_service>:
void go_to_room_C_and_place_service()
{
	SSToHome();
    1a88:	0e 94 92 0b 	call	0x1724	; 0x1724 <SSToHome>
	forward();
    1a8c:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	a1 e1       	ldi	r26, 0x11	; 17
    1a96:	81 50       	subi	r24, 0x01	; 1
    1a98:	90 40       	sbci	r25, 0x00	; 0
    1a9a:	a0 40       	sbci	r26, 0x00	; 0
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <go_to_room_C_and_place_service+0xe>
    1a9e:	00 c0       	rjmp	.+0      	; 0x1aa0 <go_to_room_C_and_place_service+0x18>
    1aa0:	00 00       	nop
	_delay_ms(400);
	right_degrees(95);
    1aa2:	8f e5       	ldi	r24, 0x5F	; 95
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	forward();
    1aaa:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	9f e7       	ldi	r25, 0x7F	; 127
    1ab2:	a3 e4       	ldi	r26, 0x43	; 67
    1ab4:	81 50       	subi	r24, 0x01	; 1
    1ab6:	90 40       	sbci	r25, 0x00	; 0
    1ab8:	a0 40       	sbci	r26, 0x00	; 0
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <go_to_room_C_and_place_service+0x2c>
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <go_to_room_C_and_place_service+0x36>
    1abe:	00 00       	nop
	_delay_ms(1500);
	
	wallFollowS5(21);
    1ac0:	85 e1       	ldi	r24, 0x15	; 21
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 df 06 	call	0xdbe	; 0xdbe <wallFollowS5>
	
	left_degrees(100);
    1ac8:	84 e6       	ldi	r24, 0x64	; 100
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	forward();
    1ad0:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	9f e7       	ldi	r25, 0x7F	; 127
    1ad8:	a8 e2       	ldi	r26, 0x28	; 40
    1ada:	81 50       	subi	r24, 0x01	; 1
    1adc:	90 40       	sbci	r25, 0x00	; 0
    1ade:	a0 40       	sbci	r26, 0x00	; 0
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <go_to_room_C_and_place_service+0x52>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <go_to_room_C_and_place_service+0x5c>
    1ae4:	00 00       	nop
	_delay_ms(900);
	
	line_follow();
    1ae6:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1aea:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	9f e3       	ldi	r25, 0x3F	; 63
    1af2:	ab e0       	ldi	r26, 0x0B	; 11
    1af4:	81 50       	subi	r24, 0x01	; 1
    1af6:	90 40       	sbci	r25, 0x00	; 0
    1af8:	a0 40       	sbci	r26, 0x00	; 0
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <go_to_room_C_and_place_service+0x6c>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <go_to_room_C_and_place_service+0x76>
    1afe:	00 00       	nop
	_delay_ms(250);
	left_degrees(100);
    1b00:	84 e6       	ldi	r24, 0x64	; 100
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	place();
    1b08:	0e 94 c8 06 	call	0xd90	; 0xd90 <place>
	
}
    1b0c:	08 95       	ret

00001b0e <garbage_dump_C>:
void garbage_dump_C(){
	
	moveArmUp();
    1b0e:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
	left_degrees(90);
    1b12:	8a e5       	ldi	r24, 0x5A	; 90
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	back();
    1b1a:	0e 94 b1 03 	call	0x762	; 0x762 <back>
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	9f e7       	ldi	r25, 0x7F	; 127
    1b22:	a4 e0       	ldi	r26, 0x04	; 4
    1b24:	81 50       	subi	r24, 0x01	; 1
    1b26:	90 40       	sbci	r25, 0x00	; 0
    1b28:	a0 40       	sbci	r26, 0x00	; 0
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <garbage_dump_C+0x16>
    1b2c:	00 c0       	rjmp	.+0      	; 0x1b2e <garbage_dump_C+0x20>
    1b2e:	00 00       	nop
	_delay_ms(100);
	
	left_degrees(110);
    1b30:	8e e6       	ldi	r24, 0x6E	; 110
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	pick();
    1b38:	0e 94 a6 06 	call	0xd4c	; 0xd4c <pick>
	right_degrees(95);
    1b3c:	8f e5       	ldi	r24, 0x5F	; 95
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	wallDetection();
    1b44:	0e 94 04 0a 	call	0x1408	; 0x1408 <wallDetection>

	forward();
    1b48:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1b4c:	8f ef       	ldi	r24, 0xFF	; 255
    1b4e:	9f ef       	ldi	r25, 0xFF	; 255
    1b50:	ac e2       	ldi	r26, 0x2C	; 44
    1b52:	81 50       	subi	r24, 0x01	; 1
    1b54:	90 40       	sbci	r25, 0x00	; 0
    1b56:	a0 40       	sbci	r26, 0x00	; 0
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <garbage_dump_C+0x44>
    1b5a:	00 c0       	rjmp	.+0      	; 0x1b5c <garbage_dump_C+0x4e>
    1b5c:	00 00       	nop
	_delay_ms(1000);
	
	right_degrees(100);
    1b5e:	84 e6       	ldi	r24, 0x64	; 100
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	wallFollowS1(60);
    1b66:	8c e3       	ldi	r24, 0x3C	; 60
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 48 08 	call	0x1090	; 0x1090 <wallFollowS1>
	line_follow();
    1b6e:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>

	forward();
    1b72:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	9f ef       	ldi	r25, 0xFF	; 255
    1b7a:	a1 e1       	ldi	r26, 0x11	; 17
    1b7c:	81 50       	subi	r24, 0x01	; 1
    1b7e:	90 40       	sbci	r25, 0x00	; 0
    1b80:	a0 40       	sbci	r26, 0x00	; 0
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <garbage_dump_C+0x6e>
    1b84:	00 c0       	rjmp	.+0      	; 0x1b86 <garbage_dump_C+0x78>
    1b86:	00 00       	nop
	_delay_ms(400);
	left_degrees(95);
    1b88:	8f e5       	ldi	r24, 0x5F	; 95
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	HomeToSS();
    1b90:	0e 94 db 09 	call	0x13b6	; 0x13b6 <HomeToSS>
	garbageCollection();
    1b94:	0e 94 ad 09 	call	0x135a	; 0x135a <garbageCollection>
}
    1b98:	08 95       	ret

00001b9a <pick_service_A>:

void pick_service_A(){
	right_degrees(180);
    1b9a:	84 eb       	ldi	r24, 0xB4	; 180
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	line_follow();//1
    1ba2:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	forward();
    1ba6:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1baa:	8f ef       	ldi	r24, 0xFF	; 255
    1bac:	9f ef       	ldi	r25, 0xFF	; 255
    1bae:	a8 e0       	ldi	r26, 0x08	; 8
    1bb0:	81 50       	subi	r24, 0x01	; 1
    1bb2:	90 40       	sbci	r25, 0x00	; 0
    1bb4:	a0 40       	sbci	r26, 0x00	; 0
    1bb6:	e1 f7       	brne	.-8      	; 0x1bb0 <pick_service_A+0x16>
    1bb8:	00 c0       	rjmp	.+0      	; 0x1bba <pick_service_A+0x20>
    1bba:	00 00       	nop
	_delay_ms(200);
	
	line_follow();//2
    1bbc:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	forward();
    1bc0:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	9f e7       	ldi	r25, 0x7F	; 127
    1bc8:	ad e0       	ldi	r26, 0x0D	; 13
    1bca:	81 50       	subi	r24, 0x01	; 1
    1bcc:	90 40       	sbci	r25, 0x00	; 0
    1bce:	a0 40       	sbci	r26, 0x00	; 0
    1bd0:	e1 f7       	brne	.-8      	; 0x1bca <pick_service_A+0x30>
    1bd2:	00 c0       	rjmp	.+0      	; 0x1bd4 <pick_service_A+0x3a>
    1bd4:	00 00       	nop
	_delay_ms(300);
	
	line_follow();//3
    1bd6:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	9f e7       	ldi	r25, 0x7F	; 127
    1bde:	ad e0       	ldi	r26, 0x0D	; 13
    1be0:	81 50       	subi	r24, 0x01	; 1
    1be2:	90 40       	sbci	r25, 0x00	; 0
    1be4:	a0 40       	sbci	r26, 0x00	; 0
    1be6:	e1 f7       	brne	.-8      	; 0x1be0 <pick_service_A+0x46>
    1be8:	00 c0       	rjmp	.+0      	; 0x1bea <pick_service_A+0x50>
    1bea:	00 00       	nop
	_delay_ms(300);
	
	line_follow();//4
    1bec:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	9f e7       	ldi	r25, 0x7F	; 127
    1bf4:	ad e0       	ldi	r26, 0x0D	; 13
    1bf6:	81 50       	subi	r24, 0x01	; 1
    1bf8:	90 40       	sbci	r25, 0x00	; 0
    1bfa:	a0 40       	sbci	r26, 0x00	; 0
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <pick_service_A+0x5c>
    1bfe:	00 c0       	rjmp	.+0      	; 0x1c00 <pick_service_A+0x66>
    1c00:	00 00       	nop
	_delay_ms(300);
	
	//rotate_left();
	forward();
    1c02:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f e7       	ldi	r25, 0x7F	; 127
    1c0a:	ad e0       	ldi	r26, 0x0D	; 13
    1c0c:	81 50       	subi	r24, 0x01	; 1
    1c0e:	90 40       	sbci	r25, 0x00	; 0
    1c10:	a0 40       	sbci	r26, 0x00	; 0
    1c12:	e1 f7       	brne	.-8      	; 0x1c0c <pick_service_A+0x72>
    1c14:	00 c0       	rjmp	.+0      	; 0x1c16 <pick_service_A+0x7c>
    1c16:	00 00       	nop
	_delay_ms(300);
	moveArmUp();
    1c18:	0e 94 82 06 	call	0xd04	; 0xd04 <moveArmUp>
	ungrip();
    1c1c:	0e 94 94 06 	call	0xd28	; 0xd28 <ungrip>
	left_degrees(100);
    1c20:	84 e6       	ldi	r24, 0x64	; 100
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	pick();
    1c28:	0e 94 a6 06 	call	0xd4c	; 0xd4c <pick>
	
}
    1c2c:	08 95       	ret

00001c2e <go_to_roomA_and_place>:

void go_to_roomA_and_place(){
	
	left_degrees(110);
    1c2e:	8e e6       	ldi	r24, 0x6E	; 110
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	line_follow();
    1c36:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1c3a:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	a8 e0       	ldi	r26, 0x08	; 8
    1c44:	81 50       	subi	r24, 0x01	; 1
    1c46:	90 40       	sbci	r25, 0x00	; 0
    1c48:	a0 40       	sbci	r26, 0x00	; 0
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <go_to_roomA_and_place+0x16>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <go_to_roomA_and_place+0x20>
    1c4e:	00 00       	nop
	_delay_ms(200);
	
	line_follow();
    1c50:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1c54:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
    1c5c:	a1 e1       	ldi	r26, 0x11	; 17
    1c5e:	81 50       	subi	r24, 0x01	; 1
    1c60:	90 40       	sbci	r25, 0x00	; 0
    1c62:	a0 40       	sbci	r26, 0x00	; 0
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <go_to_roomA_and_place+0x30>
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <go_to_roomA_and_place+0x3a>
    1c68:	00 00       	nop
	_delay_ms(400);
	right_degrees(95);
    1c6a:	8f e5       	ldi	r24, 0x5F	; 95
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	SSToHome();
    1c72:	0e 94 92 0b 	call	0x1724	; 0x1724 <SSToHome>
	forward();
    1c76:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	9f eb       	ldi	r25, 0xBF	; 191
    1c7e:	af e0       	ldi	r26, 0x0F	; 15
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	90 40       	sbci	r25, 0x00	; 0
    1c84:	a0 40       	sbci	r26, 0x00	; 0
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <go_to_roomA_and_place+0x52>
    1c88:	00 c0       	rjmp	.+0      	; 0x1c8a <go_to_roomA_and_place+0x5c>
    1c8a:	00 00       	nop
	_delay_ms(350);
	
	left_degrees(90);
    1c8c:	8a e5       	ldi	r24, 0x5A	; 90
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	forward();
    1c94:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	9f ef       	ldi	r25, 0xFF	; 255
    1c9c:	ac e2       	ldi	r26, 0x2C	; 44
    1c9e:	81 50       	subi	r24, 0x01	; 1
    1ca0:	90 40       	sbci	r25, 0x00	; 0
    1ca2:	a0 40       	sbci	r26, 0x00	; 0
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <go_to_roomA_and_place+0x70>
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <go_to_roomA_and_place+0x7a>
    1ca8:	00 00       	nop
	_delay_ms(1000);
	
	wallFollowS5(30);
    1caa:	8e e1       	ldi	r24, 0x1E	; 30
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 df 06 	call	0xdbe	; 0xdbe <wallFollowS5>
	
	left_degrees(90);
    1cb2:	8a e5       	ldi	r24, 0x5A	; 90
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	
	forward();
    1cba:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	9f ef       	ldi	r25, 0xFF	; 255
    1cc2:	ac e2       	ldi	r26, 0x2C	; 44
    1cc4:	81 50       	subi	r24, 0x01	; 1
    1cc6:	90 40       	sbci	r25, 0x00	; 0
    1cc8:	a0 40       	sbci	r26, 0x00	; 0
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <go_to_roomA_and_place+0x96>
    1ccc:	00 c0       	rjmp	.+0      	; 0x1cce <go_to_roomA_and_place+0xa0>
    1cce:	00 00       	nop
	_delay_ms(1000);
	line_follow();
    1cd0:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1cd4:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	9f e7       	ldi	r25, 0x7F	; 127
    1cdc:	ad e0       	ldi	r26, 0x0D	; 13
    1cde:	81 50       	subi	r24, 0x01	; 1
    1ce0:	90 40       	sbci	r25, 0x00	; 0
    1ce2:	a0 40       	sbci	r26, 0x00	; 0
    1ce4:	e1 f7       	brne	.-8      	; 0x1cde <go_to_roomA_and_place+0xb0>
    1ce6:	00 c0       	rjmp	.+0      	; 0x1ce8 <go_to_roomA_and_place+0xba>
    1ce8:	00 00       	nop
	_delay_ms(300);
	left_degrees(90);
    1cea:	8a e5       	ldi	r24, 0x5A	; 90
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	place();
    1cf2:	0e 94 c8 06 	call	0xd90	; 0xd90 <place>
	
	
}
    1cf6:	08 95       	ret

00001cf8 <return_To_Home>:

void return_To_Home(){
	left_degrees(100);
    1cf8:	84 e6       	ldi	r24, 0x64	; 100
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>

	wallDetection();
    1d00:	0e 94 04 0a 	call	0x1408	; 0x1408 <wallDetection>
	
	moveArmDown();
    1d04:	0e 94 5e 06 	call	0xcbc	; 0xcbc <moveArmDown>
	forward();
    1d08:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	9f ef       	ldi	r25, 0xFF	; 255
    1d10:	a5 e3       	ldi	r26, 0x35	; 53
    1d12:	81 50       	subi	r24, 0x01	; 1
    1d14:	90 40       	sbci	r25, 0x00	; 0
    1d16:	a0 40       	sbci	r26, 0x00	; 0
    1d18:	e1 f7       	brne	.-8      	; 0x1d12 <return_To_Home+0x1a>
    1d1a:	00 c0       	rjmp	.+0      	; 0x1d1c <return_To_Home+0x24>
    1d1c:	00 00       	nop
	_delay_ms(1200);
	
	right_degrees(100);
    1d1e:	84 e6       	ldi	r24, 0x64	; 100
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	
	wallfollow_S1();
    1d26:	0e 94 9b 0b 	call	0x1736	; 0x1736 <wallfollow_S1>
	
    1d2a:	08 95       	ret

00001d2c <port_init>:
#include "HGS_util.h"

//Initialize the ports
void port_init(void)
{
	lcd_port_config();
    1d2c:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_port_config>
	adc_pin_config();
    1d30:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <adc_pin_config>
	motion_pin_config();
    1d34:	0e 94 7e 03 	call	0x6fc	; 0x6fc <motion_pin_config>
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1d38:	0e 94 8f 03 	call	0x71e	; 0x71e <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
    1d3c:	0e 94 92 03 	call	0x724	; 0x724 <servo2_pin_config>
	buzzer_pin_config();
    1d40:	0e 94 d6 00 	call	0x1ac	; 0x1ac <buzzer_pin_config>
}
    1d44:	08 95       	ret

00001d46 <init_devices>:

//Function to initialize all the peripherals
void init_devices(void)
{
	cli(); //disable all interrupts
    1d46:	f8 94       	cli
	port_init();
    1d48:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <port_init>
	timer1_init();
    1d4c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <timer1_init>
	timer5_init();
    1d50:	0e 94 63 03 	call	0x6c6	; 0x6c6 <timer5_init>
	adc_init();
    1d54:	0e 94 81 02 	call	0x502	; 0x502 <adc_init>
	left_position_encoder_interrupt_init();
    1d58:	0e 94 95 03 	call	0x72a	; 0x72a <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1d5c:	0e 94 a4 03 	call	0x748	; 0x748 <right_position_encoder_interrupt_init>
	sei(); //re-enable interrupts
    1d60:	78 94       	sei
}
    1d62:	08 95       	ret

00001d64 <return_to_center_of_SS>:
void return_to_center_of_SS(){
	left_degrees(110);
    1d64:	8e e6       	ldi	r24, 0x6E	; 110
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 0f 04 	call	0x81e	; 0x81e <left_degrees>
	line_follow();
    1d6c:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
	forward();
    1d70:	0e 94 ad 03 	call	0x75a	; 0x75a <forward>
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	9f ef       	ldi	r25, 0xFF	; 255
    1d78:	a1 e1       	ldi	r26, 0x11	; 17
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	90 40       	sbci	r25, 0x00	; 0
    1d7e:	a0 40       	sbci	r26, 0x00	; 0
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <return_to_center_of_SS+0x16>
    1d82:	00 c0       	rjmp	.+0      	; 0x1d84 <return_to_center_of_SS+0x20>
    1d84:	00 00       	nop
	_delay_ms(400);
	right_degrees(90);
    1d86:	8a e5       	ldi	r24, 0x5A	; 90
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <right_degrees>
	
	line_follow();
    1d8e:	0e 94 2f 04 	call	0x85e	; 0x85e <line_follow>
	
}
    1d92:	08 95       	ret

00001d94 <provide_service_to_RoomA>:
#include "config.h"


void provide_service_to_RoomA(){
	
	pick_service_A();
    1d94:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <pick_service_A>
	go_to_roomA_and_place();
    1d98:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <go_to_roomA_and_place>
	return_To_Home();
    1d9c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <return_To_Home>
	end_buzzer();
    1da0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <end_buzzer>
	
	
}
    1da4:	08 95       	ret

00001da6 <provide_service_to_RoomC>:
void provide_service_to_RoomC(){
	
	rotate_and_pick_service_C();
    1da6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <rotate_and_pick_service_C>
	to_center_SS_from_right();
    1daa:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <to_center_SS_from_right>
	go_to_room_C_and_place_service();
    1dae:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <go_to_room_C_and_place_service>
	garbage_dump_C();
    1db2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <garbage_dump_C>
	
}
    1db6:	08 95       	ret

00001db8 <provide_service_to_RoomD>:
void provide_service_to_RoomD(){
	
	start_move_to_SS();
    1db8:	0e 94 85 0c 	call	0x190a	; 0x190a <start_move_to_SS>
	move_left_and_pick_service1();
    1dbc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <move_left_and_pick_service1>
	return_to_center_of_SS();
    1dc0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <return_to_center_of_SS>
	enterIntoRoomD_and_PlaceService();
    1dc4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <enterIntoRoomD_and_PlaceService>
	pick_garbage_D();
    1dc8:	0e 94 cf 0c 	call	0x199e	; 0x199e <pick_garbage_D>
	dump_in_DS();
    1dcc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <dump_in_DS>
}
    1dd0:	08 95       	ret

00001dd2 <initilize>:

void initilize(){
	init_devices();
    1dd2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <init_devices>
	lcd_set_4bit();
    1dd6:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_set_4bit>
	lcd_init();
    1dda:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_init>
}
    1dde:	08 95       	ret

00001de0 <main>:
int main(void)
{
   initilize();
    1de0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <initilize>
   
   provide_service_to_RoomD();
    1de4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <provide_service_to_RoomD>
   provide_service_to_RoomC();
    1de8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <provide_service_to_RoomC>
   provide_service_to_RoomA();
    1dec:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <provide_service_to_RoomA>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	08 95       	ret

00001df6 <__subsf3>:
    1df6:	50 58       	subi	r21, 0x80	; 128

00001df8 <__addsf3>:
    1df8:	bb 27       	eor	r27, r27
    1dfa:	aa 27       	eor	r26, r26
    1dfc:	0e d0       	rcall	.+28     	; 0x1e1a <__addsf3x>
    1dfe:	4d c1       	rjmp	.+666    	; 0x209a <__fp_round>
    1e00:	3e d1       	rcall	.+636    	; 0x207e <__fp_pscA>
    1e02:	30 f0       	brcs	.+12     	; 0x1e10 <__addsf3+0x18>
    1e04:	43 d1       	rcall	.+646    	; 0x208c <__fp_pscB>
    1e06:	20 f0       	brcs	.+8      	; 0x1e10 <__addsf3+0x18>
    1e08:	31 f4       	brne	.+12     	; 0x1e16 <__addsf3+0x1e>
    1e0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <__addsf3+0x1a>
    1e0e:	1e f4       	brtc	.+6      	; 0x1e16 <__addsf3+0x1e>
    1e10:	33 c1       	rjmp	.+614    	; 0x2078 <__fp_nan>
    1e12:	0e f4       	brtc	.+2      	; 0x1e16 <__addsf3+0x1e>
    1e14:	e0 95       	com	r30
    1e16:	e7 fb       	bst	r30, 7
    1e18:	29 c1       	rjmp	.+594    	; 0x206c <__fp_inf>

00001e1a <__addsf3x>:
    1e1a:	e9 2f       	mov	r30, r25
    1e1c:	4f d1       	rcall	.+670    	; 0x20bc <__fp_split3>
    1e1e:	80 f3       	brcs	.-32     	; 0x1e00 <__addsf3+0x8>
    1e20:	ba 17       	cp	r27, r26
    1e22:	62 07       	cpc	r22, r18
    1e24:	73 07       	cpc	r23, r19
    1e26:	84 07       	cpc	r24, r20
    1e28:	95 07       	cpc	r25, r21
    1e2a:	18 f0       	brcs	.+6      	; 0x1e32 <__addsf3x+0x18>
    1e2c:	71 f4       	brne	.+28     	; 0x1e4a <__addsf3x+0x30>
    1e2e:	9e f5       	brtc	.+102    	; 0x1e96 <__addsf3x+0x7c>
    1e30:	67 c1       	rjmp	.+718    	; 0x2100 <__fp_zero>
    1e32:	0e f4       	brtc	.+2      	; 0x1e36 <__addsf3x+0x1c>
    1e34:	e0 95       	com	r30
    1e36:	0b 2e       	mov	r0, r27
    1e38:	ba 2f       	mov	r27, r26
    1e3a:	a0 2d       	mov	r26, r0
    1e3c:	0b 01       	movw	r0, r22
    1e3e:	b9 01       	movw	r22, r18
    1e40:	90 01       	movw	r18, r0
    1e42:	0c 01       	movw	r0, r24
    1e44:	ca 01       	movw	r24, r20
    1e46:	a0 01       	movw	r20, r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	ff 27       	eor	r31, r31
    1e4c:	59 1b       	sub	r21, r25
    1e4e:	99 f0       	breq	.+38     	; 0x1e76 <__addsf3x+0x5c>
    1e50:	59 3f       	cpi	r21, 0xF9	; 249
    1e52:	50 f4       	brcc	.+20     	; 0x1e68 <__addsf3x+0x4e>
    1e54:	50 3e       	cpi	r21, 0xE0	; 224
    1e56:	68 f1       	brcs	.+90     	; 0x1eb2 <__addsf3x+0x98>
    1e58:	1a 16       	cp	r1, r26
    1e5a:	f0 40       	sbci	r31, 0x00	; 0
    1e5c:	a2 2f       	mov	r26, r18
    1e5e:	23 2f       	mov	r18, r19
    1e60:	34 2f       	mov	r19, r20
    1e62:	44 27       	eor	r20, r20
    1e64:	58 5f       	subi	r21, 0xF8	; 248
    1e66:	f3 cf       	rjmp	.-26     	; 0x1e4e <__addsf3x+0x34>
    1e68:	46 95       	lsr	r20
    1e6a:	37 95       	ror	r19
    1e6c:	27 95       	ror	r18
    1e6e:	a7 95       	ror	r26
    1e70:	f0 40       	sbci	r31, 0x00	; 0
    1e72:	53 95       	inc	r21
    1e74:	c9 f7       	brne	.-14     	; 0x1e68 <__addsf3x+0x4e>
    1e76:	7e f4       	brtc	.+30     	; 0x1e96 <__addsf3x+0x7c>
    1e78:	1f 16       	cp	r1, r31
    1e7a:	ba 0b       	sbc	r27, r26
    1e7c:	62 0b       	sbc	r22, r18
    1e7e:	73 0b       	sbc	r23, r19
    1e80:	84 0b       	sbc	r24, r20
    1e82:	ba f0       	brmi	.+46     	; 0x1eb2 <__addsf3x+0x98>
    1e84:	91 50       	subi	r25, 0x01	; 1
    1e86:	a1 f0       	breq	.+40     	; 0x1eb0 <__addsf3x+0x96>
    1e88:	ff 0f       	add	r31, r31
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	66 1f       	adc	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	88 1f       	adc	r24, r24
    1e92:	c2 f7       	brpl	.-16     	; 0x1e84 <__addsf3x+0x6a>
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <__addsf3x+0x98>
    1e96:	ba 0f       	add	r27, r26
    1e98:	62 1f       	adc	r22, r18
    1e9a:	73 1f       	adc	r23, r19
    1e9c:	84 1f       	adc	r24, r20
    1e9e:	48 f4       	brcc	.+18     	; 0x1eb2 <__addsf3x+0x98>
    1ea0:	87 95       	ror	r24
    1ea2:	77 95       	ror	r23
    1ea4:	67 95       	ror	r22
    1ea6:	b7 95       	ror	r27
    1ea8:	f7 95       	ror	r31
    1eaa:	9e 3f       	cpi	r25, 0xFE	; 254
    1eac:	08 f0       	brcs	.+2      	; 0x1eb0 <__addsf3x+0x96>
    1eae:	b3 cf       	rjmp	.-154    	; 0x1e16 <__addsf3+0x1e>
    1eb0:	93 95       	inc	r25
    1eb2:	88 0f       	add	r24, r24
    1eb4:	08 f0       	brcs	.+2      	; 0x1eb8 <__addsf3x+0x9e>
    1eb6:	99 27       	eor	r25, r25
    1eb8:	ee 0f       	add	r30, r30
    1eba:	97 95       	ror	r25
    1ebc:	87 95       	ror	r24
    1ebe:	08 95       	ret

00001ec0 <__divsf3>:
    1ec0:	0c d0       	rcall	.+24     	; 0x1eda <__divsf3x>
    1ec2:	eb c0       	rjmp	.+470    	; 0x209a <__fp_round>
    1ec4:	e3 d0       	rcall	.+454    	; 0x208c <__fp_pscB>
    1ec6:	40 f0       	brcs	.+16     	; 0x1ed8 <__divsf3+0x18>
    1ec8:	da d0       	rcall	.+436    	; 0x207e <__fp_pscA>
    1eca:	30 f0       	brcs	.+12     	; 0x1ed8 <__divsf3+0x18>
    1ecc:	21 f4       	brne	.+8      	; 0x1ed6 <__divsf3+0x16>
    1ece:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed0:	19 f0       	breq	.+6      	; 0x1ed8 <__divsf3+0x18>
    1ed2:	cc c0       	rjmp	.+408    	; 0x206c <__fp_inf>
    1ed4:	51 11       	cpse	r21, r1
    1ed6:	15 c1       	rjmp	.+554    	; 0x2102 <__fp_szero>
    1ed8:	cf c0       	rjmp	.+414    	; 0x2078 <__fp_nan>

00001eda <__divsf3x>:
    1eda:	f0 d0       	rcall	.+480    	; 0x20bc <__fp_split3>
    1edc:	98 f3       	brcs	.-26     	; 0x1ec4 <__divsf3+0x4>

00001ede <__divsf3_pse>:
    1ede:	99 23       	and	r25, r25
    1ee0:	c9 f3       	breq	.-14     	; 0x1ed4 <__divsf3+0x14>
    1ee2:	55 23       	and	r21, r21
    1ee4:	b1 f3       	breq	.-20     	; 0x1ed2 <__divsf3+0x12>
    1ee6:	95 1b       	sub	r25, r21
    1ee8:	55 0b       	sbc	r21, r21
    1eea:	bb 27       	eor	r27, r27
    1eec:	aa 27       	eor	r26, r26
    1eee:	62 17       	cp	r22, r18
    1ef0:	73 07       	cpc	r23, r19
    1ef2:	84 07       	cpc	r24, r20
    1ef4:	38 f0       	brcs	.+14     	; 0x1f04 <__divsf3_pse+0x26>
    1ef6:	9f 5f       	subi	r25, 0xFF	; 255
    1ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    1efa:	22 0f       	add	r18, r18
    1efc:	33 1f       	adc	r19, r19
    1efe:	44 1f       	adc	r20, r20
    1f00:	aa 1f       	adc	r26, r26
    1f02:	a9 f3       	breq	.-22     	; 0x1eee <__divsf3_pse+0x10>
    1f04:	33 d0       	rcall	.+102    	; 0x1f6c <__divsf3_pse+0x8e>
    1f06:	0e 2e       	mov	r0, r30
    1f08:	3a f0       	brmi	.+14     	; 0x1f18 <__divsf3_pse+0x3a>
    1f0a:	e0 e8       	ldi	r30, 0x80	; 128
    1f0c:	30 d0       	rcall	.+96     	; 0x1f6e <__divsf3_pse+0x90>
    1f0e:	91 50       	subi	r25, 0x01	; 1
    1f10:	50 40       	sbci	r21, 0x00	; 0
    1f12:	e6 95       	lsr	r30
    1f14:	00 1c       	adc	r0, r0
    1f16:	ca f7       	brpl	.-14     	; 0x1f0a <__divsf3_pse+0x2c>
    1f18:	29 d0       	rcall	.+82     	; 0x1f6c <__divsf3_pse+0x8e>
    1f1a:	fe 2f       	mov	r31, r30
    1f1c:	27 d0       	rcall	.+78     	; 0x1f6c <__divsf3_pse+0x8e>
    1f1e:	66 0f       	add	r22, r22
    1f20:	77 1f       	adc	r23, r23
    1f22:	88 1f       	adc	r24, r24
    1f24:	bb 1f       	adc	r27, r27
    1f26:	26 17       	cp	r18, r22
    1f28:	37 07       	cpc	r19, r23
    1f2a:	48 07       	cpc	r20, r24
    1f2c:	ab 07       	cpc	r26, r27
    1f2e:	b0 e8       	ldi	r27, 0x80	; 128
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <__divsf3_pse+0x56>
    1f32:	bb 0b       	sbc	r27, r27
    1f34:	80 2d       	mov	r24, r0
    1f36:	bf 01       	movw	r22, r30
    1f38:	ff 27       	eor	r31, r31
    1f3a:	93 58       	subi	r25, 0x83	; 131
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3e:	2a f0       	brmi	.+10     	; 0x1f4a <__divsf3_pse+0x6c>
    1f40:	9e 3f       	cpi	r25, 0xFE	; 254
    1f42:	51 05       	cpc	r21, r1
    1f44:	68 f0       	brcs	.+26     	; 0x1f60 <__divsf3_pse+0x82>
    1f46:	92 c0       	rjmp	.+292    	; 0x206c <__fp_inf>
    1f48:	dc c0       	rjmp	.+440    	; 0x2102 <__fp_szero>
    1f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f4c:	ec f3       	brlt	.-6      	; 0x1f48 <__divsf3_pse+0x6a>
    1f4e:	98 3e       	cpi	r25, 0xE8	; 232
    1f50:	dc f3       	brlt	.-10     	; 0x1f48 <__divsf3_pse+0x6a>
    1f52:	86 95       	lsr	r24
    1f54:	77 95       	ror	r23
    1f56:	67 95       	ror	r22
    1f58:	b7 95       	ror	r27
    1f5a:	f7 95       	ror	r31
    1f5c:	9f 5f       	subi	r25, 0xFF	; 255
    1f5e:	c9 f7       	brne	.-14     	; 0x1f52 <__divsf3_pse+0x74>
    1f60:	88 0f       	add	r24, r24
    1f62:	91 1d       	adc	r25, r1
    1f64:	96 95       	lsr	r25
    1f66:	87 95       	ror	r24
    1f68:	97 f9       	bld	r25, 7
    1f6a:	08 95       	ret
    1f6c:	e1 e0       	ldi	r30, 0x01	; 1
    1f6e:	66 0f       	add	r22, r22
    1f70:	77 1f       	adc	r23, r23
    1f72:	88 1f       	adc	r24, r24
    1f74:	bb 1f       	adc	r27, r27
    1f76:	62 17       	cp	r22, r18
    1f78:	73 07       	cpc	r23, r19
    1f7a:	84 07       	cpc	r24, r20
    1f7c:	ba 07       	cpc	r27, r26
    1f7e:	20 f0       	brcs	.+8      	; 0x1f88 <__divsf3_pse+0xaa>
    1f80:	62 1b       	sub	r22, r18
    1f82:	73 0b       	sbc	r23, r19
    1f84:	84 0b       	sbc	r24, r20
    1f86:	ba 0b       	sbc	r27, r26
    1f88:	ee 1f       	adc	r30, r30
    1f8a:	88 f7       	brcc	.-30     	; 0x1f6e <__divsf3_pse+0x90>
    1f8c:	e0 95       	com	r30
    1f8e:	08 95       	ret

00001f90 <__fixsfsi>:
    1f90:	04 d0       	rcall	.+8      	; 0x1f9a <__fixunssfsi>
    1f92:	68 94       	set
    1f94:	b1 11       	cpse	r27, r1
    1f96:	b5 c0       	rjmp	.+362    	; 0x2102 <__fp_szero>
    1f98:	08 95       	ret

00001f9a <__fixunssfsi>:
    1f9a:	98 d0       	rcall	.+304    	; 0x20cc <__fp_splitA>
    1f9c:	88 f0       	brcs	.+34     	; 0x1fc0 <__fixunssfsi+0x26>
    1f9e:	9f 57       	subi	r25, 0x7F	; 127
    1fa0:	90 f0       	brcs	.+36     	; 0x1fc6 <__fixunssfsi+0x2c>
    1fa2:	b9 2f       	mov	r27, r25
    1fa4:	99 27       	eor	r25, r25
    1fa6:	b7 51       	subi	r27, 0x17	; 23
    1fa8:	a0 f0       	brcs	.+40     	; 0x1fd2 <__fixunssfsi+0x38>
    1faa:	d1 f0       	breq	.+52     	; 0x1fe0 <__fixunssfsi+0x46>
    1fac:	66 0f       	add	r22, r22
    1fae:	77 1f       	adc	r23, r23
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	1a f0       	brmi	.+6      	; 0x1fbc <__fixunssfsi+0x22>
    1fb6:	ba 95       	dec	r27
    1fb8:	c9 f7       	brne	.-14     	; 0x1fac <__fixunssfsi+0x12>
    1fba:	12 c0       	rjmp	.+36     	; 0x1fe0 <__fixunssfsi+0x46>
    1fbc:	b1 30       	cpi	r27, 0x01	; 1
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <__fixunssfsi+0x46>
    1fc0:	9f d0       	rcall	.+318    	; 0x2100 <__fp_zero>
    1fc2:	b1 e0       	ldi	r27, 0x01	; 1
    1fc4:	08 95       	ret
    1fc6:	9c c0       	rjmp	.+312    	; 0x2100 <__fp_zero>
    1fc8:	67 2f       	mov	r22, r23
    1fca:	78 2f       	mov	r23, r24
    1fcc:	88 27       	eor	r24, r24
    1fce:	b8 5f       	subi	r27, 0xF8	; 248
    1fd0:	39 f0       	breq	.+14     	; 0x1fe0 <__fixunssfsi+0x46>
    1fd2:	b9 3f       	cpi	r27, 0xF9	; 249
    1fd4:	cc f3       	brlt	.-14     	; 0x1fc8 <__fixunssfsi+0x2e>
    1fd6:	86 95       	lsr	r24
    1fd8:	77 95       	ror	r23
    1fda:	67 95       	ror	r22
    1fdc:	b3 95       	inc	r27
    1fde:	d9 f7       	brne	.-10     	; 0x1fd6 <__fixunssfsi+0x3c>
    1fe0:	3e f4       	brtc	.+14     	; 0x1ff0 <__fixunssfsi+0x56>
    1fe2:	90 95       	com	r25
    1fe4:	80 95       	com	r24
    1fe6:	70 95       	com	r23
    1fe8:	61 95       	neg	r22
    1fea:	7f 4f       	sbci	r23, 0xFF	; 255
    1fec:	8f 4f       	sbci	r24, 0xFF	; 255
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	08 95       	ret

00001ff2 <__floatunsisf>:
    1ff2:	e8 94       	clt
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <__floatsisf+0x12>

00001ff6 <__floatsisf>:
    1ff6:	97 fb       	bst	r25, 7
    1ff8:	3e f4       	brtc	.+14     	; 0x2008 <__floatsisf+0x12>
    1ffa:	90 95       	com	r25
    1ffc:	80 95       	com	r24
    1ffe:	70 95       	com	r23
    2000:	61 95       	neg	r22
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	8f 4f       	sbci	r24, 0xFF	; 255
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	99 23       	and	r25, r25
    200a:	a9 f0       	breq	.+42     	; 0x2036 <__floatsisf+0x40>
    200c:	f9 2f       	mov	r31, r25
    200e:	96 e9       	ldi	r25, 0x96	; 150
    2010:	bb 27       	eor	r27, r27
    2012:	93 95       	inc	r25
    2014:	f6 95       	lsr	r31
    2016:	87 95       	ror	r24
    2018:	77 95       	ror	r23
    201a:	67 95       	ror	r22
    201c:	b7 95       	ror	r27
    201e:	f1 11       	cpse	r31, r1
    2020:	f8 cf       	rjmp	.-16     	; 0x2012 <__floatsisf+0x1c>
    2022:	fa f4       	brpl	.+62     	; 0x2062 <__floatsisf+0x6c>
    2024:	bb 0f       	add	r27, r27
    2026:	11 f4       	brne	.+4      	; 0x202c <__floatsisf+0x36>
    2028:	60 ff       	sbrs	r22, 0
    202a:	1b c0       	rjmp	.+54     	; 0x2062 <__floatsisf+0x6c>
    202c:	6f 5f       	subi	r22, 0xFF	; 255
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	8f 4f       	sbci	r24, 0xFF	; 255
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	16 c0       	rjmp	.+44     	; 0x2062 <__floatsisf+0x6c>
    2036:	88 23       	and	r24, r24
    2038:	11 f0       	breq	.+4      	; 0x203e <__floatsisf+0x48>
    203a:	96 e9       	ldi	r25, 0x96	; 150
    203c:	11 c0       	rjmp	.+34     	; 0x2060 <__floatsisf+0x6a>
    203e:	77 23       	and	r23, r23
    2040:	21 f0       	breq	.+8      	; 0x204a <__floatsisf+0x54>
    2042:	9e e8       	ldi	r25, 0x8E	; 142
    2044:	87 2f       	mov	r24, r23
    2046:	76 2f       	mov	r23, r22
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <__floatsisf+0x5e>
    204a:	66 23       	and	r22, r22
    204c:	71 f0       	breq	.+28     	; 0x206a <__floatsisf+0x74>
    204e:	96 e8       	ldi	r25, 0x86	; 134
    2050:	86 2f       	mov	r24, r22
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	2a f0       	brmi	.+10     	; 0x2062 <__floatsisf+0x6c>
    2058:	9a 95       	dec	r25
    205a:	66 0f       	add	r22, r22
    205c:	77 1f       	adc	r23, r23
    205e:	88 1f       	adc	r24, r24
    2060:	da f7       	brpl	.-10     	; 0x2058 <__floatsisf+0x62>
    2062:	88 0f       	add	r24, r24
    2064:	96 95       	lsr	r25
    2066:	87 95       	ror	r24
    2068:	97 f9       	bld	r25, 7
    206a:	08 95       	ret

0000206c <__fp_inf>:
    206c:	97 f9       	bld	r25, 7
    206e:	9f 67       	ori	r25, 0x7F	; 127
    2070:	80 e8       	ldi	r24, 0x80	; 128
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	08 95       	ret

00002078 <__fp_nan>:
    2078:	9f ef       	ldi	r25, 0xFF	; 255
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	08 95       	ret

0000207e <__fp_pscA>:
    207e:	00 24       	eor	r0, r0
    2080:	0a 94       	dec	r0
    2082:	16 16       	cp	r1, r22
    2084:	17 06       	cpc	r1, r23
    2086:	18 06       	cpc	r1, r24
    2088:	09 06       	cpc	r0, r25
    208a:	08 95       	ret

0000208c <__fp_pscB>:
    208c:	00 24       	eor	r0, r0
    208e:	0a 94       	dec	r0
    2090:	12 16       	cp	r1, r18
    2092:	13 06       	cpc	r1, r19
    2094:	14 06       	cpc	r1, r20
    2096:	05 06       	cpc	r0, r21
    2098:	08 95       	ret

0000209a <__fp_round>:
    209a:	09 2e       	mov	r0, r25
    209c:	03 94       	inc	r0
    209e:	00 0c       	add	r0, r0
    20a0:	11 f4       	brne	.+4      	; 0x20a6 <__fp_round+0xc>
    20a2:	88 23       	and	r24, r24
    20a4:	52 f0       	brmi	.+20     	; 0x20ba <__fp_round+0x20>
    20a6:	bb 0f       	add	r27, r27
    20a8:	40 f4       	brcc	.+16     	; 0x20ba <__fp_round+0x20>
    20aa:	bf 2b       	or	r27, r31
    20ac:	11 f4       	brne	.+4      	; 0x20b2 <__fp_round+0x18>
    20ae:	60 ff       	sbrs	r22, 0
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <__fp_round+0x20>
    20b2:	6f 5f       	subi	r22, 0xFF	; 255
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	8f 4f       	sbci	r24, 0xFF	; 255
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	08 95       	ret

000020bc <__fp_split3>:
    20bc:	57 fd       	sbrc	r21, 7
    20be:	90 58       	subi	r25, 0x80	; 128
    20c0:	44 0f       	add	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	59 f0       	breq	.+22     	; 0x20dc <__fp_splitA+0x10>
    20c6:	5f 3f       	cpi	r21, 0xFF	; 255
    20c8:	71 f0       	breq	.+28     	; 0x20e6 <__fp_splitA+0x1a>
    20ca:	47 95       	ror	r20

000020cc <__fp_splitA>:
    20cc:	88 0f       	add	r24, r24
    20ce:	97 fb       	bst	r25, 7
    20d0:	99 1f       	adc	r25, r25
    20d2:	61 f0       	breq	.+24     	; 0x20ec <__fp_splitA+0x20>
    20d4:	9f 3f       	cpi	r25, 0xFF	; 255
    20d6:	79 f0       	breq	.+30     	; 0x20f6 <__fp_splitA+0x2a>
    20d8:	87 95       	ror	r24
    20da:	08 95       	ret
    20dc:	12 16       	cp	r1, r18
    20de:	13 06       	cpc	r1, r19
    20e0:	14 06       	cpc	r1, r20
    20e2:	55 1f       	adc	r21, r21
    20e4:	f2 cf       	rjmp	.-28     	; 0x20ca <__fp_split3+0xe>
    20e6:	46 95       	lsr	r20
    20e8:	f1 df       	rcall	.-30     	; 0x20cc <__fp_splitA>
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <__fp_splitA+0x30>
    20ec:	16 16       	cp	r1, r22
    20ee:	17 06       	cpc	r1, r23
    20f0:	18 06       	cpc	r1, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	f1 cf       	rjmp	.-30     	; 0x20d8 <__fp_splitA+0xc>
    20f6:	86 95       	lsr	r24
    20f8:	71 05       	cpc	r23, r1
    20fa:	61 05       	cpc	r22, r1
    20fc:	08 94       	sec
    20fe:	08 95       	ret

00002100 <__fp_zero>:
    2100:	e8 94       	clt

00002102 <__fp_szero>:
    2102:	bb 27       	eor	r27, r27
    2104:	66 27       	eor	r22, r22
    2106:	77 27       	eor	r23, r23
    2108:	cb 01       	movw	r24, r22
    210a:	97 f9       	bld	r25, 7
    210c:	08 95       	ret

0000210e <__mulsf3>:
    210e:	0b d0       	rcall	.+22     	; 0x2126 <__mulsf3x>
    2110:	c4 cf       	rjmp	.-120    	; 0x209a <__fp_round>
    2112:	b5 df       	rcall	.-150    	; 0x207e <__fp_pscA>
    2114:	28 f0       	brcs	.+10     	; 0x2120 <__mulsf3+0x12>
    2116:	ba df       	rcall	.-140    	; 0x208c <__fp_pscB>
    2118:	18 f0       	brcs	.+6      	; 0x2120 <__mulsf3+0x12>
    211a:	95 23       	and	r25, r21
    211c:	09 f0       	breq	.+2      	; 0x2120 <__mulsf3+0x12>
    211e:	a6 cf       	rjmp	.-180    	; 0x206c <__fp_inf>
    2120:	ab cf       	rjmp	.-170    	; 0x2078 <__fp_nan>
    2122:	11 24       	eor	r1, r1
    2124:	ee cf       	rjmp	.-36     	; 0x2102 <__fp_szero>

00002126 <__mulsf3x>:
    2126:	ca df       	rcall	.-108    	; 0x20bc <__fp_split3>
    2128:	a0 f3       	brcs	.-24     	; 0x2112 <__mulsf3+0x4>

0000212a <__mulsf3_pse>:
    212a:	95 9f       	mul	r25, r21
    212c:	d1 f3       	breq	.-12     	; 0x2122 <__mulsf3+0x14>
    212e:	95 0f       	add	r25, r21
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	55 1f       	adc	r21, r21
    2134:	62 9f       	mul	r22, r18
    2136:	f0 01       	movw	r30, r0
    2138:	72 9f       	mul	r23, r18
    213a:	bb 27       	eor	r27, r27
    213c:	f0 0d       	add	r31, r0
    213e:	b1 1d       	adc	r27, r1
    2140:	63 9f       	mul	r22, r19
    2142:	aa 27       	eor	r26, r26
    2144:	f0 0d       	add	r31, r0
    2146:	b1 1d       	adc	r27, r1
    2148:	aa 1f       	adc	r26, r26
    214a:	64 9f       	mul	r22, r20
    214c:	66 27       	eor	r22, r22
    214e:	b0 0d       	add	r27, r0
    2150:	a1 1d       	adc	r26, r1
    2152:	66 1f       	adc	r22, r22
    2154:	82 9f       	mul	r24, r18
    2156:	22 27       	eor	r18, r18
    2158:	b0 0d       	add	r27, r0
    215a:	a1 1d       	adc	r26, r1
    215c:	62 1f       	adc	r22, r18
    215e:	73 9f       	mul	r23, r19
    2160:	b0 0d       	add	r27, r0
    2162:	a1 1d       	adc	r26, r1
    2164:	62 1f       	adc	r22, r18
    2166:	83 9f       	mul	r24, r19
    2168:	a0 0d       	add	r26, r0
    216a:	61 1d       	adc	r22, r1
    216c:	22 1f       	adc	r18, r18
    216e:	74 9f       	mul	r23, r20
    2170:	33 27       	eor	r19, r19
    2172:	a0 0d       	add	r26, r0
    2174:	61 1d       	adc	r22, r1
    2176:	23 1f       	adc	r18, r19
    2178:	84 9f       	mul	r24, r20
    217a:	60 0d       	add	r22, r0
    217c:	21 1d       	adc	r18, r1
    217e:	82 2f       	mov	r24, r18
    2180:	76 2f       	mov	r23, r22
    2182:	6a 2f       	mov	r22, r26
    2184:	11 24       	eor	r1, r1
    2186:	9f 57       	subi	r25, 0x7F	; 127
    2188:	50 40       	sbci	r21, 0x00	; 0
    218a:	8a f0       	brmi	.+34     	; 0x21ae <__mulsf3_pse+0x84>
    218c:	e1 f0       	breq	.+56     	; 0x21c6 <__mulsf3_pse+0x9c>
    218e:	88 23       	and	r24, r24
    2190:	4a f0       	brmi	.+18     	; 0x21a4 <__mulsf3_pse+0x7a>
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	bb 1f       	adc	r27, r27
    2198:	66 1f       	adc	r22, r22
    219a:	77 1f       	adc	r23, r23
    219c:	88 1f       	adc	r24, r24
    219e:	91 50       	subi	r25, 0x01	; 1
    21a0:	50 40       	sbci	r21, 0x00	; 0
    21a2:	a9 f7       	brne	.-22     	; 0x218e <__mulsf3_pse+0x64>
    21a4:	9e 3f       	cpi	r25, 0xFE	; 254
    21a6:	51 05       	cpc	r21, r1
    21a8:	70 f0       	brcs	.+28     	; 0x21c6 <__mulsf3_pse+0x9c>
    21aa:	60 cf       	rjmp	.-320    	; 0x206c <__fp_inf>
    21ac:	aa cf       	rjmp	.-172    	; 0x2102 <__fp_szero>
    21ae:	5f 3f       	cpi	r21, 0xFF	; 255
    21b0:	ec f3       	brlt	.-6      	; 0x21ac <__mulsf3_pse+0x82>
    21b2:	98 3e       	cpi	r25, 0xE8	; 232
    21b4:	dc f3       	brlt	.-10     	; 0x21ac <__mulsf3_pse+0x82>
    21b6:	86 95       	lsr	r24
    21b8:	77 95       	ror	r23
    21ba:	67 95       	ror	r22
    21bc:	b7 95       	ror	r27
    21be:	f7 95       	ror	r31
    21c0:	e7 95       	ror	r30
    21c2:	9f 5f       	subi	r25, 0xFF	; 255
    21c4:	c1 f7       	brne	.-16     	; 0x21b6 <__mulsf3_pse+0x8c>
    21c6:	fe 2b       	or	r31, r30
    21c8:	88 0f       	add	r24, r24
    21ca:	91 1d       	adc	r25, r1
    21cc:	96 95       	lsr	r25
    21ce:	87 95       	ror	r24
    21d0:	97 f9       	bld	r25, 7
    21d2:	08 95       	ret

000021d4 <pow>:
    21d4:	fa 01       	movw	r30, r20
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	30 96       	adiw	r30, 0x00	; 0
    21dc:	21 05       	cpc	r18, r1
    21de:	31 05       	cpc	r19, r1
    21e0:	99 f1       	breq	.+102    	; 0x2248 <__stack+0x49>
    21e2:	61 15       	cp	r22, r1
    21e4:	71 05       	cpc	r23, r1
    21e6:	61 f4       	brne	.+24     	; 0x2200 <__stack+0x1>
    21e8:	80 38       	cpi	r24, 0x80	; 128
    21ea:	bf e3       	ldi	r27, 0x3F	; 63
    21ec:	9b 07       	cpc	r25, r27
    21ee:	49 f1       	breq	.+82     	; 0x2242 <__stack+0x43>
    21f0:	68 94       	set
    21f2:	90 38       	cpi	r25, 0x80	; 128
    21f4:	81 05       	cpc	r24, r1
    21f6:	61 f0       	breq	.+24     	; 0x2210 <__stack+0x11>
    21f8:	80 38       	cpi	r24, 0x80	; 128
    21fa:	bf ef       	ldi	r27, 0xFF	; 255
    21fc:	9b 07       	cpc	r25, r27
    21fe:	41 f0       	breq	.+16     	; 0x2210 <__stack+0x11>
    2200:	99 23       	and	r25, r25
    2202:	42 f5       	brpl	.+80     	; 0x2254 <__stack+0x55>
    2204:	ff 3f       	cpi	r31, 0xFF	; 255
    2206:	e1 05       	cpc	r30, r1
    2208:	31 05       	cpc	r19, r1
    220a:	21 05       	cpc	r18, r1
    220c:	11 f1       	breq	.+68     	; 0x2252 <__stack+0x53>
    220e:	e8 94       	clt
    2210:	08 94       	sec
    2212:	e7 95       	ror	r30
    2214:	d9 01       	movw	r26, r18
    2216:	aa 23       	and	r26, r26
    2218:	29 f4       	brne	.+10     	; 0x2224 <__stack+0x25>
    221a:	ab 2f       	mov	r26, r27
    221c:	be 2f       	mov	r27, r30
    221e:	f8 5f       	subi	r31, 0xF8	; 248
    2220:	d0 f3       	brcs	.-12     	; 0x2216 <__stack+0x17>
    2222:	10 c0       	rjmp	.+32     	; 0x2244 <__stack+0x45>
    2224:	ff 5f       	subi	r31, 0xFF	; 255
    2226:	70 f4       	brcc	.+28     	; 0x2244 <__stack+0x45>
    2228:	a6 95       	lsr	r26
    222a:	e0 f7       	brcc	.-8      	; 0x2224 <__stack+0x25>
    222c:	f7 39       	cpi	r31, 0x97	; 151
    222e:	50 f0       	brcs	.+20     	; 0x2244 <__stack+0x45>
    2230:	19 f0       	breq	.+6      	; 0x2238 <__stack+0x39>
    2232:	ff 3a       	cpi	r31, 0xAF	; 175
    2234:	38 f4       	brcc	.+14     	; 0x2244 <__stack+0x45>
    2236:	9f 77       	andi	r25, 0x7F	; 127
    2238:	9f 93       	push	r25
    223a:	0c d0       	rcall	.+24     	; 0x2254 <__stack+0x55>
    223c:	0f 90       	pop	r0
    223e:	07 fc       	sbrc	r0, 7
    2240:	90 58       	subi	r25, 0x80	; 128
    2242:	08 95       	ret
    2244:	3e f0       	brts	.+14     	; 0x2254 <__stack+0x55>
    2246:	18 cf       	rjmp	.-464    	; 0x2078 <__fp_nan>
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	80 e8       	ldi	r24, 0x80	; 128
    224e:	9f e3       	ldi	r25, 0x3F	; 63
    2250:	08 95       	ret
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	9f 77       	andi	r25, 0x7F	; 127
    2256:	5f 93       	push	r21
    2258:	4f 93       	push	r20
    225a:	3f 93       	push	r19
    225c:	2f 93       	push	r18
    225e:	9e d0       	rcall	.+316    	; 0x239c <log>
    2260:	2f 91       	pop	r18
    2262:	3f 91       	pop	r19
    2264:	4f 91       	pop	r20
    2266:	5f 91       	pop	r21
    2268:	52 df       	rcall	.-348    	; 0x210e <__mulsf3>
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <exp>
    226c:	19 f4       	brne	.+6      	; 0x2274 <__stack+0x75>
    226e:	0e f0       	brts	.+2      	; 0x2272 <__stack+0x73>
    2270:	fd ce       	rjmp	.-518    	; 0x206c <__fp_inf>
    2272:	46 cf       	rjmp	.-372    	; 0x2100 <__fp_zero>
    2274:	01 cf       	rjmp	.-510    	; 0x2078 <__fp_nan>

00002276 <exp>:
    2276:	2a df       	rcall	.-428    	; 0x20cc <__fp_splitA>
    2278:	c8 f3       	brcs	.-14     	; 0x226c <__stack+0x6d>
    227a:	96 38       	cpi	r25, 0x86	; 134
    227c:	c0 f7       	brcc	.-16     	; 0x226e <__stack+0x6f>
    227e:	07 f8       	bld	r0, 7
    2280:	0f 92       	push	r0
    2282:	e8 94       	clt
    2284:	2b e3       	ldi	r18, 0x3B	; 59
    2286:	3a ea       	ldi	r19, 0xAA	; 170
    2288:	48 eb       	ldi	r20, 0xB8	; 184
    228a:	5f e7       	ldi	r21, 0x7F	; 127
    228c:	4e df       	rcall	.-356    	; 0x212a <__mulsf3_pse>
    228e:	0f 92       	push	r0
    2290:	0f 92       	push	r0
    2292:	0f 92       	push	r0
    2294:	4d b7       	in	r20, 0x3d	; 61
    2296:	5e b7       	in	r21, 0x3e	; 62
    2298:	0f 92       	push	r0
    229a:	c0 d0       	rcall	.+384    	; 0x241c <modf>
    229c:	e4 ee       	ldi	r30, 0xE4	; 228
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	16 d0       	rcall	.+44     	; 0x22ce <__fp_powser>
    22a2:	4f 91       	pop	r20
    22a4:	5f 91       	pop	r21
    22a6:	ef 91       	pop	r30
    22a8:	ff 91       	pop	r31
    22aa:	e5 95       	asr	r30
    22ac:	ee 1f       	adc	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	49 f0       	breq	.+18     	; 0x22c4 <exp+0x4e>
    22b2:	fe 57       	subi	r31, 0x7E	; 126
    22b4:	e0 68       	ori	r30, 0x80	; 128
    22b6:	44 27       	eor	r20, r20
    22b8:	ee 0f       	add	r30, r30
    22ba:	44 1f       	adc	r20, r20
    22bc:	fa 95       	dec	r31
    22be:	e1 f7       	brne	.-8      	; 0x22b8 <exp+0x42>
    22c0:	41 95       	neg	r20
    22c2:	55 0b       	sbc	r21, r21
    22c4:	32 d0       	rcall	.+100    	; 0x232a <ldexp>
    22c6:	0f 90       	pop	r0
    22c8:	07 fe       	sbrs	r0, 7
    22ca:	26 c0       	rjmp	.+76     	; 0x2318 <inverse>
    22cc:	08 95       	ret

000022ce <__fp_powser>:
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	1f 93       	push	r17
    22d4:	0f 93       	push	r16
    22d6:	ff 92       	push	r15
    22d8:	ef 92       	push	r14
    22da:	df 92       	push	r13
    22dc:	7b 01       	movw	r14, r22
    22de:	8c 01       	movw	r16, r24
    22e0:	68 94       	set
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <__fp_powser+0x20>
    22e4:	da 2e       	mov	r13, r26
    22e6:	ef 01       	movw	r28, r30
    22e8:	1e df       	rcall	.-452    	; 0x2126 <__mulsf3x>
    22ea:	fe 01       	movw	r30, r28
    22ec:	e8 94       	clt
    22ee:	a5 91       	lpm	r26, Z+
    22f0:	25 91       	lpm	r18, Z+
    22f2:	35 91       	lpm	r19, Z+
    22f4:	45 91       	lpm	r20, Z+
    22f6:	55 91       	lpm	r21, Z+
    22f8:	ae f3       	brts	.-22     	; 0x22e4 <__fp_powser+0x16>
    22fa:	ef 01       	movw	r28, r30
    22fc:	8e dd       	rcall	.-1252   	; 0x1e1a <__addsf3x>
    22fe:	fe 01       	movw	r30, r28
    2300:	97 01       	movw	r18, r14
    2302:	a8 01       	movw	r20, r16
    2304:	da 94       	dec	r13
    2306:	79 f7       	brne	.-34     	; 0x22e6 <__fp_powser+0x18>
    2308:	df 90       	pop	r13
    230a:	ef 90       	pop	r14
    230c:	ff 90       	pop	r15
    230e:	0f 91       	pop	r16
    2310:	1f 91       	pop	r17
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <inverse>:
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	80 e8       	ldi	r24, 0x80	; 128
    2322:	9f e3       	ldi	r25, 0x3F	; 63
    2324:	cd cd       	rjmp	.-1126   	; 0x1ec0 <__divsf3>
    2326:	a2 ce       	rjmp	.-700    	; 0x206c <__fp_inf>
    2328:	ac c0       	rjmp	.+344    	; 0x2482 <__fp_mpack>

0000232a <ldexp>:
    232a:	d0 de       	rcall	.-608    	; 0x20cc <__fp_splitA>
    232c:	e8 f3       	brcs	.-6      	; 0x2328 <inverse+0x10>
    232e:	99 23       	and	r25, r25
    2330:	d9 f3       	breq	.-10     	; 0x2328 <inverse+0x10>
    2332:	94 0f       	add	r25, r20
    2334:	51 1d       	adc	r21, r1
    2336:	bb f3       	brvs	.-18     	; 0x2326 <inverse+0xe>
    2338:	91 50       	subi	r25, 0x01	; 1
    233a:	50 40       	sbci	r21, 0x00	; 0
    233c:	94 f0       	brlt	.+36     	; 0x2362 <ldexp+0x38>
    233e:	59 f0       	breq	.+22     	; 0x2356 <ldexp+0x2c>
    2340:	88 23       	and	r24, r24
    2342:	32 f0       	brmi	.+12     	; 0x2350 <ldexp+0x26>
    2344:	66 0f       	add	r22, r22
    2346:	77 1f       	adc	r23, r23
    2348:	88 1f       	adc	r24, r24
    234a:	91 50       	subi	r25, 0x01	; 1
    234c:	50 40       	sbci	r21, 0x00	; 0
    234e:	c1 f7       	brne	.-16     	; 0x2340 <ldexp+0x16>
    2350:	9e 3f       	cpi	r25, 0xFE	; 254
    2352:	51 05       	cpc	r21, r1
    2354:	44 f7       	brge	.-48     	; 0x2326 <inverse+0xe>
    2356:	88 0f       	add	r24, r24
    2358:	91 1d       	adc	r25, r1
    235a:	96 95       	lsr	r25
    235c:	87 95       	ror	r24
    235e:	97 f9       	bld	r25, 7
    2360:	08 95       	ret
    2362:	5f 3f       	cpi	r21, 0xFF	; 255
    2364:	ac f0       	brlt	.+42     	; 0x2390 <ldexp+0x66>
    2366:	98 3e       	cpi	r25, 0xE8	; 232
    2368:	9c f0       	brlt	.+38     	; 0x2390 <ldexp+0x66>
    236a:	bb 27       	eor	r27, r27
    236c:	86 95       	lsr	r24
    236e:	77 95       	ror	r23
    2370:	67 95       	ror	r22
    2372:	b7 95       	ror	r27
    2374:	08 f4       	brcc	.+2      	; 0x2378 <ldexp+0x4e>
    2376:	b1 60       	ori	r27, 0x01	; 1
    2378:	93 95       	inc	r25
    237a:	c1 f7       	brne	.-16     	; 0x236c <ldexp+0x42>
    237c:	bb 0f       	add	r27, r27
    237e:	58 f7       	brcc	.-42     	; 0x2356 <ldexp+0x2c>
    2380:	11 f4       	brne	.+4      	; 0x2386 <ldexp+0x5c>
    2382:	60 ff       	sbrs	r22, 0
    2384:	e8 cf       	rjmp	.-48     	; 0x2356 <ldexp+0x2c>
    2386:	6f 5f       	subi	r22, 0xFF	; 255
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	8f 4f       	sbci	r24, 0xFF	; 255
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	e3 cf       	rjmp	.-58     	; 0x2356 <ldexp+0x2c>
    2390:	b8 ce       	rjmp	.-656    	; 0x2102 <__fp_szero>
    2392:	0e f0       	brts	.+2      	; 0x2396 <ldexp+0x6c>
    2394:	76 c0       	rjmp	.+236    	; 0x2482 <__fp_mpack>
    2396:	70 ce       	rjmp	.-800    	; 0x2078 <__fp_nan>
    2398:	68 94       	set
    239a:	68 ce       	rjmp	.-816    	; 0x206c <__fp_inf>

0000239c <log>:
    239c:	97 de       	rcall	.-722    	; 0x20cc <__fp_splitA>
    239e:	c8 f3       	brcs	.-14     	; 0x2392 <ldexp+0x68>
    23a0:	99 23       	and	r25, r25
    23a2:	d1 f3       	breq	.-12     	; 0x2398 <ldexp+0x6e>
    23a4:	c6 f3       	brts	.-16     	; 0x2396 <ldexp+0x6c>
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	1f 93       	push	r17
    23ac:	0f 93       	push	r16
    23ae:	ff 92       	push	r15
    23b0:	c9 2f       	mov	r28, r25
    23b2:	dd 27       	eor	r29, r29
    23b4:	88 23       	and	r24, r24
    23b6:	2a f0       	brmi	.+10     	; 0x23c2 <log+0x26>
    23b8:	21 97       	sbiw	r28, 0x01	; 1
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	da f7       	brpl	.-10     	; 0x23b8 <log+0x1c>
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f eb       	ldi	r21, 0xBF	; 191
    23ca:	9f e3       	ldi	r25, 0x3F	; 63
    23cc:	88 39       	cpi	r24, 0x98	; 152
    23ce:	20 f0       	brcs	.+8      	; 0x23d8 <log+0x3c>
    23d0:	80 3e       	cpi	r24, 0xE0	; 224
    23d2:	30 f0       	brcs	.+12     	; 0x23e0 <log+0x44>
    23d4:	21 96       	adiw	r28, 0x01	; 1
    23d6:	8f 77       	andi	r24, 0x7F	; 127
    23d8:	0f dd       	rcall	.-1506   	; 0x1df8 <__addsf3>
    23da:	ec e0       	ldi	r30, 0x0C	; 12
    23dc:	f1 e0       	ldi	r31, 0x01	; 1
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <log+0x4a>
    23e0:	0b dd       	rcall	.-1514   	; 0x1df8 <__addsf3>
    23e2:	e9 e3       	ldi	r30, 0x39	; 57
    23e4:	f1 e0       	ldi	r31, 0x01	; 1
    23e6:	73 df       	rcall	.-282    	; 0x22ce <__fp_powser>
    23e8:	8b 01       	movw	r16, r22
    23ea:	be 01       	movw	r22, r28
    23ec:	ec 01       	movw	r28, r24
    23ee:	fb 2e       	mov	r15, r27
    23f0:	6f 57       	subi	r22, 0x7F	; 127
    23f2:	71 09       	sbc	r23, r1
    23f4:	75 95       	asr	r23
    23f6:	77 1f       	adc	r23, r23
    23f8:	88 0b       	sbc	r24, r24
    23fa:	99 0b       	sbc	r25, r25
    23fc:	fc dd       	rcall	.-1032   	; 0x1ff6 <__floatsisf>
    23fe:	28 e1       	ldi	r18, 0x18	; 24
    2400:	32 e7       	ldi	r19, 0x72	; 114
    2402:	41 e3       	ldi	r20, 0x31	; 49
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	8f de       	rcall	.-738    	; 0x2126 <__mulsf3x>
    2408:	af 2d       	mov	r26, r15
    240a:	98 01       	movw	r18, r16
    240c:	ae 01       	movw	r20, r28
    240e:	ff 90       	pop	r15
    2410:	0f 91       	pop	r16
    2412:	1f 91       	pop	r17
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	00 dd       	rcall	.-1536   	; 0x1e1a <__addsf3x>
    241a:	3f ce       	rjmp	.-898    	; 0x209a <__fp_round>

0000241c <modf>:
    241c:	fa 01       	movw	r30, r20
    241e:	dc 01       	movw	r26, r24
    2420:	aa 0f       	add	r26, r26
    2422:	bb 1f       	adc	r27, r27
    2424:	9b 01       	movw	r18, r22
    2426:	ac 01       	movw	r20, r24
    2428:	bf 57       	subi	r27, 0x7F	; 127
    242a:	28 f4       	brcc	.+10     	; 0x2436 <modf+0x1a>
    242c:	22 27       	eor	r18, r18
    242e:	33 27       	eor	r19, r19
    2430:	44 27       	eor	r20, r20
    2432:	50 78       	andi	r21, 0x80	; 128
    2434:	1f c0       	rjmp	.+62     	; 0x2474 <modf+0x58>
    2436:	b7 51       	subi	r27, 0x17	; 23
    2438:	88 f4       	brcc	.+34     	; 0x245c <modf+0x40>
    243a:	ab 2f       	mov	r26, r27
    243c:	00 24       	eor	r0, r0
    243e:	46 95       	lsr	r20
    2440:	37 95       	ror	r19
    2442:	27 95       	ror	r18
    2444:	01 1c       	adc	r0, r1
    2446:	a3 95       	inc	r26
    2448:	d2 f3       	brmi	.-12     	; 0x243e <modf+0x22>
    244a:	00 20       	and	r0, r0
    244c:	69 f0       	breq	.+26     	; 0x2468 <modf+0x4c>
    244e:	22 0f       	add	r18, r18
    2450:	33 1f       	adc	r19, r19
    2452:	44 1f       	adc	r20, r20
    2454:	b3 95       	inc	r27
    2456:	da f3       	brmi	.-10     	; 0x244e <modf+0x32>
    2458:	0d d0       	rcall	.+26     	; 0x2474 <modf+0x58>
    245a:	cd cc       	rjmp	.-1638   	; 0x1df6 <__subsf3>
    245c:	61 30       	cpi	r22, 0x01	; 1
    245e:	71 05       	cpc	r23, r1
    2460:	a0 e8       	ldi	r26, 0x80	; 128
    2462:	8a 07       	cpc	r24, r26
    2464:	b9 46       	sbci	r27, 0x69	; 105
    2466:	30 f4       	brcc	.+12     	; 0x2474 <modf+0x58>
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	66 27       	eor	r22, r22
    246e:	77 27       	eor	r23, r23
    2470:	88 27       	eor	r24, r24
    2472:	90 78       	andi	r25, 0x80	; 128
    2474:	30 96       	adiw	r30, 0x00	; 0
    2476:	21 f0       	breq	.+8      	; 0x2480 <modf+0x64>
    2478:	20 83       	st	Z, r18
    247a:	31 83       	std	Z+1, r19	; 0x01
    247c:	42 83       	std	Z+2, r20	; 0x02
    247e:	53 83       	std	Z+3, r21	; 0x03
    2480:	08 95       	ret

00002482 <__fp_mpack>:
    2482:	9f 3f       	cpi	r25, 0xFF	; 255
    2484:	31 f0       	breq	.+12     	; 0x2492 <__fp_mpack_finite+0xc>

00002486 <__fp_mpack_finite>:
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	20 f4       	brcc	.+8      	; 0x2492 <__fp_mpack_finite+0xc>
    248a:	87 95       	ror	r24
    248c:	77 95       	ror	r23
    248e:	67 95       	ror	r22
    2490:	b7 95       	ror	r27
    2492:	88 0f       	add	r24, r24
    2494:	91 1d       	adc	r25, r1
    2496:	96 95       	lsr	r25
    2498:	87 95       	ror	r24
    249a:	97 f9       	bld	r25, 7
    249c:	08 95       	ret

0000249e <__udivmodhi4>:
    249e:	aa 1b       	sub	r26, r26
    24a0:	bb 1b       	sub	r27, r27
    24a2:	51 e1       	ldi	r21, 0x11	; 17
    24a4:	07 c0       	rjmp	.+14     	; 0x24b4 <__udivmodhi4_ep>

000024a6 <__udivmodhi4_loop>:
    24a6:	aa 1f       	adc	r26, r26
    24a8:	bb 1f       	adc	r27, r27
    24aa:	a6 17       	cp	r26, r22
    24ac:	b7 07       	cpc	r27, r23
    24ae:	10 f0       	brcs	.+4      	; 0x24b4 <__udivmodhi4_ep>
    24b0:	a6 1b       	sub	r26, r22
    24b2:	b7 0b       	sbc	r27, r23

000024b4 <__udivmodhi4_ep>:
    24b4:	88 1f       	adc	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	5a 95       	dec	r21
    24ba:	a9 f7       	brne	.-22     	; 0x24a6 <__udivmodhi4_loop>
    24bc:	80 95       	com	r24
    24be:	90 95       	com	r25
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	08 95       	ret

000024c6 <_exit>:
    24c6:	f8 94       	cli

000024c8 <__stop_program>:
    24c8:	ff cf       	rjmp	.-2      	; 0x24c8 <__stop_program>
